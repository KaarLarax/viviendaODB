<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/reset_db.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/reset_db.bat" />
              <option name="updatedContent" value="@echo off&#10;echo Deteniendo procesos Java que puedan estar usando la base de datos...&#10;taskkill /F /IM java.exe /T 2&gt;nul&#10;timeout /t 2 /nobreak &gt;nul&#10;&#10;echo Eliminando archivos de base de datos...&#10;cd /d &quot;%~dp0db&quot;&#10;del /F /Q vivienda.odb 2&gt;nul&#10;del /F /Q vivienda.odb$ 2&gt;nul&#10;&#10;echo.&#10;echo Base de datos eliminada exitosamente.&#10;echo La base de datos se recreara automaticamente cuando ejecutes la aplicacion.&#10;echo.&#10;pause&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/vivienda/controller/.keep">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/vivienda/controller/.keep" />
              <option name="updatedContent" value="# Empty file to ensure controller folder exists" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/.keep">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/.keep" />
              <option name="updatedContent" value="# Empty file to ensure view folder exists" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/CasaUnifamiliarViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/CasaUnifamiliarViewController.java" />
              <option name="originalContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.CasaUnifamiliarController;&#10;import com.example.vivienda.controller.ColoniaController;&#10;import com.example.vivienda.controller.PersonaController;&#10;import com.example.vivienda.model.CasaUnifamiliar;&#10;import com.example.vivienda.model.Colonia;&#10;import com.example.vivienda.model.Persona;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.beans.property.SimpleStringProperty;&#10;&#10;public class CasaUnifamiliarViewController {&#10;    @FXML private TextField txtDireccion;&#10;    @FXML private TextField txtSuperficie;&#10;    @FXML private TextField txtNumeroExterior;&#10;    @FXML private TextField txtNumeroPisos;&#10;    @FXML private ComboBox&lt;Colonia&gt; comboColonia;&#10;    @FXML private ComboBox&lt;Persona&gt; comboPropietario;&#10;    @FXML private TableView&lt;CasaUnifamiliar&gt; casaUnifamiliarTable;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, Long&gt; idColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; direccionColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; superficieColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; numeroExteriorColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, Integer&gt; numeroPisosColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; coloniaColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; propietarioColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, Integer&gt; numeroHabitantesColumn;&#10;    @FXML private Button btnAgregar;&#10;    @FXML private Button btnEditar;&#10;    @FXML private Button btnEliminar;&#10;    @FXML private Button btnLimpiar;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final CasaUnifamiliarController casaDAO = new CasaUnifamiliarController();&#10;    private final ColoniaController coloniaDAO = new ColoniaController();&#10;    private final PersonaController personaDAO = new PersonaController();&#10;    private ObservableList&lt;CasaUnifamiliar&gt; todasLasCasas = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        // Configurar columnas&#10;        idColumn.setCellValueFactory(cellData -&gt; new javafx.beans.property.SimpleLongProperty(cellData.getValue().getId()).asObject());&#10;        direccionColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(data.getValue().getDireccion()));&#10;        superficieColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(String.valueOf(data.getValue().getSuperficie())));&#10;        numeroExteriorColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(data.getValue().getNumeroExterior()));&#10;        numeroPisosColumn.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleObjectProperty&lt;&gt;(data.getValue().getNumeroPisos()));&#10;        coloniaColumn.setCellValueFactory(data -&gt; {&#10;            Colonia colonia = data.getValue().getColonia();&#10;            return new SimpleStringProperty(colonia != null ? colonia.getNombre() : &quot;&quot;);&#10;        });&#10;        propietarioColumn.setCellValueFactory(data -&gt; {&#10;            Persona propietario = data.getValue().getPropietario();&#10;            return new SimpleStringProperty(propietario != null ? propietario.toString() : &quot;&quot;);&#10;        });&#10;&#10;        // Columna de número de habitantes&#10;        numeroHabitantesColumn.setCellValueFactory(data -&gt; {&#10;            CasaUnifamiliar casa = data.getValue();&#10;            int numHabitantes = casa.getHabitantes() != null ? casa.getHabitantes().size() : 0;&#10;            return new javafx.beans.property.SimpleObjectProperty&lt;&gt;(numHabitantes);&#10;        });&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Dirección&quot;,&#10;            &quot;Superficie&quot;,&#10;            &quot;Número Exterior&quot;,&#10;            &quot;Nº Pisos&quot;,&#10;            &quot;Colonia&quot;,&#10;            &quot;Propietario&quot;,&#10;            &quot;Nº Habitantes&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Cargar datos&#10;        loadCasas();&#10;        comboColonia.setItems(FXCollections.observableArrayList(coloniaDAO.obtenerTodasLasColonias()));&#10;        comboPropietario.setItems(FXCollections.observableArrayList(personaDAO.obtenerTodasLasPersonas()));&#10;&#10;        // Configurar buttonCell para mostrar el prompt text cuando no hay selección&#10;        comboColonia.setButtonCell(new javafx.scene.control.ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione colonia&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new javafx.scene.control.ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Inicializar botones&#10;        setButtonsState(true, false, false);&#10;&#10;        // Listener de selección de tabla&#10;        casaUnifamiliarTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                mostrarCasa(newSelection);&#10;                setButtonsState(false, true, true);&#10;            } else {&#10;                setButtonsState(true, false, false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            casaUnifamiliarTable.setItems(todasLasCasas);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;CasaUnifamiliar&gt; casasFiltradas = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (CasaUnifamiliar casa : todasLasCasas) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(casa.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Dirección&quot;:&#10;                    coincide = casa.getDireccion() != null &amp;&amp;&#10;                              casa.getDireccion().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Superficie&quot;:&#10;                    coincide = String.valueOf(casa.getSuperficie()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Número Exterior&quot;:&#10;                    coincide = casa.getNumeroExterior() != null &amp;&amp;&#10;                              casa.getNumeroExterior().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nº Pisos&quot;:&#10;                    coincide = String.valueOf(casa.getNumeroPisos()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Colonia&quot;:&#10;                    Colonia c = casa.getColonia();&#10;                    coincide = c != null &amp;&amp; c.getNombre() != null &amp;&amp;&#10;                              c.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Propietario&quot;:&#10;                    Persona p = casa.getPropietario();&#10;                    if (p != null) {&#10;                        String nombreCompleto = p.getNombre() != null ? p.getNombre() : &quot;&quot;;&#10;                        if (p.getFamilia() != null &amp;&amp; p.getFamilia().getApellidos() != null) {&#10;                            nombreCompleto += &quot; &quot; + p.getFamilia().getApellidos();&#10;                        }&#10;                        coincide = nombreCompleto.toLowerCase().contains(textoMinusculas);&#10;                    }&#10;                    break;&#10;                case &quot;Nº Habitantes&quot;:&#10;                    int numHabitantes = casa.getHabitantes() != null ? casa.getHabitantes().size() : 0;&#10;                    coincide = String.valueOf(numHabitantes).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                casasFiltradas.add(casa);&#10;            }&#10;        }&#10;&#10;        casaUnifamiliarTable.setItems(casasFiltradas);&#10;    }&#10;&#10;    private void loadCasas() {&#10;        todasLasCasas.setAll(casaDAO.obtenerTodasLasCasas());&#10;        casaUnifamiliarTable.setItems(todasLasCasas);&#10;    }&#10;&#10;    private void mostrarCasa(CasaUnifamiliar casa) {&#10;        if (casa != null) {&#10;            txtDireccion.setText(casa.getDireccion());&#10;            txtSuperficie.setText(String.valueOf(casa.getSuperficie()));&#10;            txtNumeroExterior.setText(casa.getNumeroExterior());&#10;            txtNumeroPisos.setText(String.valueOf(casa.getNumeroPisos()));&#10;            comboColonia.setValue(casa.getColonia());&#10;            comboPropietario.setValue(casa.getPropietario());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void onAgregar() {&#10;        if (!validarCampos()) return;&#10;&#10;        // Validar número exterior duplicado en la misma dirección&#10;        String direccionIngresada = txtDireccion.getText().trim();&#10;        String numeroExteriorIngresado = txtNumeroExterior.getText().trim();&#10;&#10;        boolean numeroDuplicado = casaDAO.obtenerTodasLasCasas().stream()&#10;                .anyMatch(c -&gt; c.getDireccion() != null &amp;&amp; c.getDireccion().trim().equalsIgnoreCase(direccionIngresada) &amp;&amp;&#10;                              c.getNumeroExterior() != null &amp;&amp; c.getNumeroExterior().trim().equals(numeroExteriorIngresado));&#10;&#10;        if (numeroDuplicado) {&#10;            mostrarAlerta(&quot;Error al crear casa&quot;, &quot;Número Exterior duplicado&quot;,&#10;                    &quot;Ya existe una vivienda con el número exterior &quot; + numeroExteriorIngresado + &quot; en la dirección &quot; + direccionIngresada + &quot;.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            String direccion = txtDireccion.getText().trim();&#10;            double superficie = Double.parseDouble(txtSuperficie.getText().trim());&#10;            String numeroExterior = txtNumeroExterior.getText().trim();&#10;            int pisos = Integer.parseInt(txtNumeroPisos.getText().trim());&#10;            Colonia colonia = comboColonia.getValue();&#10;            Persona propietario = comboPropietario.getValue();&#10;&#10;            CasaUnifamiliar casa = new CasaUnifamiliar(direccion, superficie, numeroExterior, propietario, colonia, pisos);&#10;            // Mantener consistencia bidireccional: que la persona propietaria apunte a esta vivienda&#10;            if (propietario != null) {&#10;                propietario.setVivienda(casa);&#10;            }&#10;&#10;            casaDAO.crearCasa(casa);&#10;            postAction();&#10;        } catch (javax.persistence.PersistenceException e) {&#10;            e.printStackTrace();&#10;            if (e.getMessage() != null &amp;&amp; e.getMessage().contains(&quot;Unique constraint&quot;)) {&#10;                mostrarAlerta(&quot;Error al crear casa&quot;, &quot;Número Exterior duplicado&quot;,&#10;                        &quot;El número exterior '&quot; + numeroExteriorIngresado + &quot;' ya existe en la dirección '&quot; + direccionIngresada + &quot;'.&quot;);&#10;            } else {&#10;                mostrarAlerta(&quot;Error al agregar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al crear la casa: &quot; + e.getMessage());&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            mostrarAlerta(&quot;Error al agregar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al crear la casa: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void onEditar() {&#10;        CasaUnifamiliar seleccionada = casaUnifamiliarTable.getSelectionModel().getSelectedItem();&#10;        if (seleccionada == null) return;&#10;        if (!validarCampos()) return;&#10;&#10;        // Validar número exterior duplicado (excepto la actual)&#10;        String direccionIngresada = txtDireccion.getText().trim();&#10;        String numeroExteriorIngresado = txtNumeroExterior.getText().trim();&#10;        String direccionOriginal = seleccionada.getDireccion() != null ? seleccionada.getDireccion().trim() : &quot;&quot;;&#10;        String numeroExteriorOriginal = seleccionada.getNumeroExterior() != null ? seleccionada.getNumeroExterior().trim() : &quot;&quot;;&#10;&#10;        if (!direccionOriginal.equalsIgnoreCase(direccionIngresada) || !numeroExteriorOriginal.equals(numeroExteriorIngresado)) {&#10;            boolean numeroDuplicado = casaDAO.obtenerTodasLasCasas().stream()&#10;                    .anyMatch(c -&gt; c.getDireccion() != null &amp;&amp; c.getDireccion().trim().equalsIgnoreCase(direccionIngresada) &amp;&amp;&#10;                                   c.getNumeroExterior() != null &amp;&amp; c.getNumeroExterior().trim().equals(numeroExteriorIngresado) &amp;&amp;&#10;                                   c.getId() != seleccionada.getId());&#10;            if (numeroDuplicado) {&#10;                mostrarAlerta(&quot;Error al actualizar casa&quot;, &quot;Número Exterior duplicado&quot;,&#10;                        &quot;Ya existe una vivienda con el número exterior &quot; + numeroExteriorIngresado + &quot; en la dirección &quot; + direccionIngresada + &quot;.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        try {&#10;            seleccionada.setDireccion(txtDireccion.getText().trim());&#10;            seleccionada.setSuperficie(Double.parseDouble(txtSuperficie.getText().trim()));&#10;            seleccionada.setNumeroExterior(txtNumeroExterior.getText().trim());&#10;            seleccionada.setNumeroPisos(Integer.parseInt(txtNumeroPisos.getText().trim()));&#10;            seleccionada.setColonia(comboColonia.getValue());&#10;            seleccionada.setPropietario(comboPropietario.getValue());&#10;            // Mantener consistencia bidireccional: que la persona propietaria apunte a esta vivienda&#10;            if (seleccionada.getPropietario() != null) {&#10;                seleccionada.getPropietario().setVivienda(seleccionada);&#10;            }&#10;            casaDAO.actualizarCasa(seleccionada);&#10;            postAction();&#10;        } catch (javax.persistence.PersistenceException e) {&#10;            e.printStackTrace();&#10;            if (e.getMessage() != null &amp;&amp; e.getMessage().contains(&quot;Unique constraint&quot;)) {&#10;                mostrarAlerta(&quot;Error al actualizar casa&quot;, &quot;Número Exterior duplicado&quot;,&#10;                        &quot;El número exterior '&quot; + numeroExteriorIngresado + &quot;' ya existe en la dirección '&quot; + direccionIngresada + &quot;'.&quot;);&#10;            } else {&#10;                mostrarAlerta(&quot;Error al editar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al actualizar la casa: &quot; + e.getMessage());&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            mostrarAlerta(&quot;Error al editar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al actualizar la casa: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void onEliminar() {&#10;        CasaUnifamiliar seleccionada = casaUnifamiliarTable.getSelectionModel().getSelectedItem();&#10;        if (seleccionada == null) return;&#10;&#10;        casaDAO.eliminarCasa(seleccionada);&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void onLimpiar() {&#10;        txtDireccion.clear();&#10;        txtSuperficie.clear();&#10;        txtNumeroExterior.clear();&#10;        txtNumeroPisos.clear();&#10;        comboColonia.setValue(null);&#10;        comboPropietario.setValue(null);&#10;        casaUnifamiliarTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        setButtonsState(true, false, false);&#10;&#10;        // Forzar refresco visual de ComboBox&#10;        comboColonia.setButtonCell(new javafx.scene.control.ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione colonia&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new javafx.scene.control.ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @FXML&#10;    private void onVolver() {&#10;        // Implementa la lógica para volver al menú principal o cerrar la ventana&#10;    }&#10;&#10;    private void postAction() {&#10;        limpiarCampos();&#10;        loadCasas();&#10;        casaUnifamiliarTable.getSelectionModel().clearSelection();&#10;&#10;        //  Refrescar la tabla de colonias para actualizar el número de viviendas&#10;        if (ColoniaViewController.getInstance() != null) {&#10;            ColoniaViewController.getInstance().refreshTable();&#10;        }&#10;    }&#10;&#10;    private void limpiarCampos() {&#10;        txtDireccion.clear();&#10;        txtSuperficie.clear();&#10;        txtNumeroExterior.clear();&#10;        txtNumeroPisos.clear();&#10;        comboColonia.getSelectionModel().clearSelection();&#10;        comboColonia.setValue(null);&#10;        comboPropietario.getSelectionModel().clearSelection();&#10;        comboPropietario.setValue(null);&#10;        casaUnifamiliarTable.getSelectionModel().clearSelection();&#10;        setButtonsState(true, false, false);&#10;&#10;        // Forzar refresco visual&#10;        comboColonia.setButtonCell(new javafx.scene.control.ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione colonia&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new javafx.scene.control.ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void setButtonsState(boolean crear, boolean actualizar, boolean eliminar) {&#10;        btnAgregar.setDisable(!crear);&#10;        btnEditar.setDisable(!actualizar);&#10;        btnEliminar.setDisable(!eliminar);&#10;    }&#10;&#10;    private boolean validarCampos() {&#10;        // Validar campos vacíos&#10;        if (txtDireccion.getText().trim().isEmpty() || txtSuperficie.getText().trim().isEmpty() ||&#10;                txtNumeroExterior.getText().trim().isEmpty() || txtNumeroPisos.getText().trim().isEmpty()) {&#10;            mostrarAlerta(&quot;Campos incompletos&quot;, &quot;Faltan datos&quot;,&#10;                    &quot;Todos los campos de texto son obligatorios.&quot;);&#10;            return false;&#10;        }&#10;&#10;        // Validar que se haya seleccionado colonia&#10;        if (comboColonia.getValue() == null) {&#10;            mostrarAlerta(&quot;Campo incompleto&quot;, &quot;Falta seleccionar colonia&quot;,&#10;                    &quot;Debe seleccionar una colonia.&quot;);&#10;            return false;&#10;        }&#10;&#10;        // Validar que se haya seleccionado propietario&#10;        if (comboPropietario.getValue() == null) {&#10;            mostrarAlerta(&quot;Campo incompleto&quot;, &quot;Falta seleccionar propietario&quot;,&#10;                    &quot;Debe seleccionar un propietario.&quot;);&#10;            return false;&#10;        }&#10;&#10;        // Validar superficie&#10;        try {&#10;            double superficie = Double.parseDouble(txtSuperficie.getText().trim());&#10;            if (superficie &lt;= 0) {&#10;                mostrarAlerta(&quot;Dato inválido&quot;, &quot;Superficie inválida&quot;,&#10;                        &quot;La superficie debe ser un número positivo.&quot;);&#10;                return false;&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            mostrarAlerta(&quot;Dato inválido&quot;, &quot;Superficie inválida&quot;,&#10;                    &quot;Ingrese un número válido para la superficie.&quot;);&#10;            return false;&#10;        }&#10;&#10;        // Validar número de pisos&#10;        try {&#10;            int pisos = Integer.parseInt(txtNumeroPisos.getText().trim());&#10;            if (pisos &lt;= 0) {&#10;                mostrarAlerta(&quot;Dato inválido&quot;, &quot;Número de pisos inválido&quot;,&#10;                        &quot;El número de pisos debe ser un número positivo.&quot;);&#10;                return false;&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            mostrarAlerta(&quot;Dato inválido&quot;, &quot;Número de pisos inválido&quot;,&#10;                    &quot;Ingrese un número entero válido para el número de pisos.&quot;);&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void mostrarAlerta(String titulo, String header, String contenido) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(header);&#10;        alert.setContentText(contenido);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.CasaUnifamiliarController;&#10;import com.example.vivienda.controller.ColoniaController;&#10;import com.example.vivienda.controller.PersonaController;&#10;import com.example.vivienda.model.CasaUnifamiliar;&#10;import com.example.vivienda.model.Colonia;&#10;import com.example.vivienda.model.Persona;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.beans.property.SimpleStringProperty;&#10;&#10;public class CasaUnifamiliarViewController {&#10;    @FXML private TextField txtDireccion;&#10;    @FXML private TextField txtSuperficie;&#10;    @FXML private TextField txtNumeroExterior;&#10;    @FXML private TextField txtNumeroPisos;&#10;    @FXML private ComboBox&lt;Colonia&gt; comboColonia;&#10;    @FXML private ComboBox&lt;Persona&gt; comboPropietario;&#10;    @FXML private TableView&lt;CasaUnifamiliar&gt; casaUnifamiliarTable;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, Long&gt; idColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; direccionColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; superficieColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; numeroExteriorColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, Integer&gt; numeroPisosColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; coloniaColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, String&gt; propietarioColumn;&#10;    @FXML private TableColumn&lt;CasaUnifamiliar, Integer&gt; numeroHabitantesColumn;&#10;    @FXML private Button btnAgregar;&#10;    @FXML private Button btnEditar;&#10;    @FXML private Button btnEliminar;&#10;    @FXML private Button btnLimpiar;&#10;    @FXML private Button btnListar;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final CasaUnifamiliarController casaDAO = new CasaUnifamiliarController();&#10;    private final ColoniaController coloniaDAO = new ColoniaController();&#10;    private final PersonaController personaDAO = new PersonaController();&#10;    private ObservableList&lt;CasaUnifamiliar&gt; todasLasCasas = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        // Configurar columnas&#10;        idColumn.setCellValueFactory(cellData -&gt; new javafx.beans.property.SimpleLongProperty(cellData.getValue().getId()).asObject());&#10;        direccionColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(data.getValue().getDireccion()));&#10;        superficieColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(String.valueOf(data.getValue().getSuperficie())));&#10;        numeroExteriorColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(data.getValue().getNumeroExterior()));&#10;        numeroPisosColumn.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleObjectProperty&lt;&gt;(data.getValue().getNumeroPisos()));&#10;        coloniaColumn.setCellValueFactory(data -&gt; {&#10;            Colonia colonia = data.getValue().getColonia();&#10;            return new SimpleStringProperty(colonia != null ? colonia.getNombre() : &quot;&quot;);&#10;        });&#10;        propietarioColumn.setCellValueFactory(data -&gt; {&#10;            Persona propietario = data.getValue().getPropietario();&#10;            return new SimpleStringProperty(propietario != null ? propietario.toString() : &quot;&quot;);&#10;        });&#10;&#10;        // Columna de número de habitantes&#10;        numeroHabitantesColumn.setCellValueFactory(data -&gt; {&#10;            CasaUnifamiliar casa = data.getValue();&#10;            int numHabitantes = casa.getHabitantes() != null ? casa.getHabitantes().size() : 0;&#10;            return new javafx.beans.property.SimpleObjectProperty&lt;&gt;(numHabitantes);&#10;        });&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Dirección&quot;,&#10;            &quot;Superficie&quot;,&#10;            &quot;Número Exterior&quot;,&#10;            &quot;Nº Pisos&quot;,&#10;            &quot;Colonia&quot;,&#10;            &quot;Propietario&quot;,&#10;            &quot;Nº Habitantes&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Cargar datos&#10;        comboColonia.setItems(FXCollections.observableArrayList(coloniaDAO.obtenerTodasLasColonias()));&#10;        comboPropietario.setItems(FXCollections.observableArrayList(personaDAO.obtenerTodasLasPersonas()));&#10;&#10;        // Configurar buttonCell para mostrar el prompt text cuando no hay selección&#10;        comboColonia.setButtonCell(new javafx.scene.control.ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione colonia&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new javafx.scene.control.ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Inicializar botones&#10;        setButtonsState(true, false, false);&#10;&#10;        // Listener de selección de tabla&#10;        casaUnifamiliarTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                mostrarCasa(newSelection);&#10;                setButtonsState(false, true, true);&#10;            } else {&#10;                setButtonsState(true, false, false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            casaUnifamiliarTable.setItems(todasLasCasas);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;CasaUnifamiliar&gt; casasFiltradas = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (CasaUnifamiliar casa : todasLasCasas) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(casa.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Dirección&quot;:&#10;                    coincide = casa.getDireccion() != null &amp;&amp;&#10;                              casa.getDireccion().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Superficie&quot;:&#10;                    coincide = String.valueOf(casa.getSuperficie()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Número Exterior&quot;:&#10;                    coincide = casa.getNumeroExterior() != null &amp;&amp;&#10;                              casa.getNumeroExterior().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nº Pisos&quot;:&#10;                    coincide = String.valueOf(casa.getNumeroPisos()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Colonia&quot;:&#10;                    Colonia c = casa.getColonia();&#10;                    coincide = c != null &amp;&amp; c.getNombre() != null &amp;&amp;&#10;                              c.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Propietario&quot;:&#10;                    Persona p = casa.getPropietario();&#10;                    if (p != null) {&#10;                        String nombreCompleto = p.getNombre() != null ? p.getNombre() : &quot;&quot;;&#10;                        if (p.getFamilia() != null &amp;&amp; p.getFamilia().getApellidos() != null) {&#10;                            nombreCompleto += &quot; &quot; + p.getFamilia().getApellidos();&#10;                        }&#10;                        coincide = nombreCompleto.toLowerCase().contains(textoMinusculas);&#10;                    }&#10;                    break;&#10;                case &quot;Nº Habitantes&quot;:&#10;                    int numHabitantes = casa.getHabitantes() != null ? casa.getHabitantes().size() : 0;&#10;                    coincide = String.valueOf(numHabitantes).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                casasFiltradas.add(casa);&#10;            }&#10;        }&#10;&#10;        casaUnifamiliarTable.setItems(casasFiltradas);&#10;    }&#10;&#10;    private void loadCasas() {&#10;        todasLasCasas.setAll(casaDAO.obtenerTodasLasCasas());&#10;        casaUnifamiliarTable.setItems(todasLasCasas);&#10;    }&#10;&#10;    private void mostrarCasa(CasaUnifamiliar casa) {&#10;        if (casa != null) {&#10;            txtDireccion.setText(casa.getDireccion());&#10;            txtSuperficie.setText(String.valueOf(casa.getSuperficie()));&#10;            txtNumeroExterior.setText(casa.getNumeroExterior());&#10;            txtNumeroPisos.setText(String.valueOf(casa.getNumeroPisos()));&#10;            comboColonia.setValue(casa.getColonia());&#10;            comboPropietario.setValue(casa.getPropietario());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void onAgregar() {&#10;        if (!validarCampos()) return;&#10;&#10;        // Validar número exterior duplicado en la misma dirección&#10;        String direccionIngresada = txtDireccion.getText().trim();&#10;        String numeroExteriorIngresado = txtNumeroExterior.getText().trim();&#10;&#10;        boolean numeroDuplicado = casaDAO.obtenerTodasLasCasas().stream()&#10;                .anyMatch(c -&gt; c.getDireccion() != null &amp;&amp; c.getDireccion().trim().equalsIgnoreCase(direccionIngresada) &amp;&amp;&#10;                              c.getNumeroExterior() != null &amp;&amp; c.getNumeroExterior().trim().equals(numeroExteriorIngresado));&#10;&#10;        if (numeroDuplicado) {&#10;            mostrarAlerta(&quot;Error al crear casa&quot;, &quot;Número Exterior duplicado&quot;,&#10;                    &quot;Ya existe una vivienda con el número exterior &quot; + numeroExteriorIngresado + &quot; en la dirección &quot; + direccionIngresada + &quot;.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            String direccion = txtDireccion.getText().trim();&#10;            double superficie = Double.parseDouble(txtSuperficie.getText().trim());&#10;            String numeroExterior = txtNumeroExterior.getText().trim();&#10;            int pisos = Integer.parseInt(txtNumeroPisos.getText().trim());&#10;            Colonia colonia = comboColonia.getValue();&#10;            Persona propietario = comboPropietario.getValue();&#10;&#10;            CasaUnifamiliar casa = new CasaUnifamiliar(direccion, superficie, numeroExterior, propietario, colonia, pisos);&#10;            // Mantener consistencia bidireccional: que la persona propietaria apunte a esta vivienda&#10;            if (propietario != null) {&#10;                propietario.setVivienda(casa);&#10;            }&#10;&#10;            casaDAO.crearCasa(casa);&#10;            postAction();&#10;        } catch (javax.persistence.PersistenceException e) {&#10;            e.printStackTrace();&#10;            if (e.getMessage() != null &amp;&amp; e.getMessage().contains(&quot;Unique constraint&quot;)) {&#10;                mostrarAlerta(&quot;Error al crear casa&quot;, &quot;Número Exterior duplicado&quot;,&#10;                        &quot;El número exterior '&quot; + numeroExteriorIngresado + &quot;' ya existe en la dirección '&quot; + direccionIngresada + &quot;'.&quot;);&#10;            } else {&#10;                mostrarAlerta(&quot;Error al agregar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al crear la casa: &quot; + e.getMessage());&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            mostrarAlerta(&quot;Error al agregar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al crear la casa: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void onEditar() {&#10;        CasaUnifamiliar seleccionada = casaUnifamiliarTable.getSelectionModel().getSelectedItem();&#10;        if (seleccionada == null) return;&#10;        if (!validarCampos()) return;&#10;&#10;        // Validar número exterior duplicado (excepto la actual)&#10;        String direccionIngresada = txtDireccion.getText().trim();&#10;        String numeroExteriorIngresado = txtNumeroExterior.getText().trim();&#10;        String direccionOriginal = seleccionada.getDireccion() != null ? seleccionada.getDireccion().trim() : &quot;&quot;;&#10;        String numeroExteriorOriginal = seleccionada.getNumeroExterior() != null ? seleccionada.getNumeroExterior().trim() : &quot;&quot;;&#10;&#10;        if (!direccionOriginal.equalsIgnoreCase(direccionIngresada) || !numeroExteriorOriginal.equals(numeroExteriorIngresado)) {&#10;            boolean numeroDuplicado = casaDAO.obtenerTodasLasCasas().stream()&#10;                    .anyMatch(c -&gt; c.getDireccion() != null &amp;&amp; c.getDireccion().trim().equalsIgnoreCase(direccionIngresada) &amp;&amp;&#10;                                   c.getNumeroExterior() != null &amp;&amp; c.getNumeroExterior().trim().equals(numeroExteriorIngresado) &amp;&amp;&#10;                                   c.getId() != seleccionada.getId());&#10;            if (numeroDuplicado) {&#10;                mostrarAlerta(&quot;Error al actualizar casa&quot;, &quot;Número Exterior duplicado&quot;,&#10;                        &quot;Ya existe una vivienda con el número exterior &quot; + numeroExteriorIngresado + &quot; en la dirección &quot; + direccionIngresada + &quot;.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        try {&#10;            seleccionada.setDireccion(txtDireccion.getText().trim());&#10;            seleccionada.setSuperficie(Double.parseDouble(txtSuperficie.getText().trim()));&#10;            seleccionada.setNumeroExterior(txtNumeroExterior.getText().trim());&#10;            seleccionada.setNumeroPisos(Integer.parseInt(txtNumeroPisos.getText().trim()));&#10;            seleccionada.setColonia(comboColonia.getValue());&#10;            seleccionada.setPropietario(comboPropietario.getValue());&#10;            // Mantener consistencia bidireccional: que la persona propietaria apunte a esta vivienda&#10;            if (seleccionada.getPropietario() != null) {&#10;                seleccionada.getPropietario().setVivienda(seleccionada);&#10;            }&#10;            casaDAO.actualizarCasa(seleccionada);&#10;            postAction();&#10;        } catch (javax.persistence.PersistenceException e) {&#10;            e.printStackTrace();&#10;            if (e.getMessage() != null &amp;&amp; e.getMessage().contains(&quot;Unique constraint&quot;)) {&#10;                mostrarAlerta(&quot;Error al actualizar casa&quot;, &quot;Número Exterior duplicado&quot;,&#10;                        &quot;El número exterior '&quot; + numeroExteriorIngresado + &quot;' ya existe en la dirección '&quot; + direccionIngresada + &quot;'.&quot;);&#10;            } else {&#10;                mostrarAlerta(&quot;Error al editar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al actualizar la casa: &quot; + e.getMessage());&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            mostrarAlerta(&quot;Error al editar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al actualizar la casa: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void onEliminar() {&#10;        CasaUnifamiliar seleccionada = casaUnifamiliarTable.getSelectionModel().getSelectedItem();&#10;        if (seleccionada == null) return;&#10;&#10;        casaDAO.eliminarCasa(seleccionada);&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void onLimpiar() {&#10;        txtDireccion.clear();&#10;        txtSuperficie.clear();&#10;        txtNumeroExterior.clear();&#10;        txtNumeroPisos.clear();&#10;        comboColonia.setValue(null);&#10;        comboPropietario.setValue(null);&#10;        casaUnifamiliarTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        setButtonsState(true, false, false);&#10;&#10;        // Forzar refresco visual de ComboBox&#10;        comboColonia.setButtonCell(new javafx.scene.control.ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione colonia&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new javafx.scene.control.ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @FXML&#10;    private void onListar() {&#10;        loadCasas();&#10;    }&#10;&#10;    @FXML&#10;    private void onVolver() {&#10;        // Implementa la lógica para volver al menú principal o cerrar la ventana&#10;    }&#10;&#10;    private void postAction() {&#10;        limpiarCampos();&#10;        loadCasas();&#10;        casaUnifamiliarTable.getSelectionModel().clearSelection();&#10;&#10;        //  Refrescar la tabla de colonias para actualizar el número de viviendas&#10;        if (ColoniaViewController.getInstance() != null) {&#10;            ColoniaViewController.getInstance().refreshTable();&#10;        }&#10;    }&#10;&#10;    private void limpiarCampos() {&#10;        txtDireccion.clear();&#10;        txtSuperficie.clear();&#10;        txtNumeroExterior.clear();&#10;        txtNumeroPisos.clear();&#10;        comboColonia.getSelectionModel().clearSelection();&#10;        comboColonia.setValue(null);&#10;        comboPropietario.getSelectionModel().clearSelection();&#10;        comboPropietario.setValue(null);&#10;        casaUnifamiliarTable.getSelectionModel().clearSelection();&#10;        setButtonsState(true, false, false);&#10;&#10;        // Forzar refresco visual&#10;        comboColonia.setButtonCell(new javafx.scene.control.ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione colonia&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new javafx.scene.control.ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void setButtonsState(boolean crear, boolean actualizar, boolean eliminar) {&#10;        btnAgregar.setDisable(!crear);&#10;        btnEditar.setDisable(!actualizar);&#10;        btnEliminar.setDisable(!eliminar);&#10;    }&#10;&#10;    private boolean validarCampos() {&#10;        // Validar campos vacíos&#10;        if (txtDireccion.getText().trim().isEmpty() || txtSuperficie.getText().trim().isEmpty() ||&#10;                txtNumeroExterior.getText().trim().isEmpty() || txtNumeroPisos.getText().trim().isEmpty()) {&#10;            mostrarAlerta(&quot;Campos incompletos&quot;, &quot;Faltan datos&quot;,&#10;                    &quot;Todos los campos de texto son obligatorios.&quot;);&#10;            return false;&#10;        }&#10;&#10;        // Validar que se haya seleccionado colonia&#10;        if (comboColonia.getValue() == null) {&#10;            mostrarAlerta(&quot;Campo incompleto&quot;, &quot;Falta seleccionar colonia&quot;,&#10;                    &quot;Debe seleccionar una colonia.&quot;);&#10;            return false;&#10;        }&#10;&#10;        // Validar que se haya seleccionado propietario&#10;        if (comboPropietario.getValue() == null) {&#10;            mostrarAlerta(&quot;Campo incompleto&quot;, &quot;Falta seleccionar propietario&quot;,&#10;                    &quot;Debe seleccionar un propietario.&quot;);&#10;            return false;&#10;        }&#10;&#10;        // Validar superficie&#10;        try {&#10;            double superficie = Double.parseDouble(txtSuperficie.getText().trim());&#10;            if (superficie &lt;= 0) {&#10;                mostrarAlerta(&quot;Dato inválido&quot;, &quot;Superficie inválida&quot;,&#10;                        &quot;La superficie debe ser un número positivo.&quot;);&#10;                return false;&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            mostrarAlerta(&quot;Dato inválido&quot;, &quot;Superficie inválida&quot;,&#10;                    &quot;Ingrese un número válido para la superficie.&quot;);&#10;            return false;&#10;        }&#10;&#10;        // Validar número de pisos&#10;        try {&#10;            int pisos = Integer.parseInt(txtNumeroPisos.getText().trim());&#10;            if (pisos &lt;= 0) {&#10;                mostrarAlerta(&quot;Dato inválido&quot;, &quot;Número de pisos inválido&quot;,&#10;                        &quot;El número de pisos debe ser un número positivo.&quot;);&#10;                return false;&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            mostrarAlerta(&quot;Dato inválido&quot;, &quot;Número de pisos inválido&quot;,&#10;                    &quot;Ingrese un número entero válido para el número de pisos.&quot;);&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void mostrarAlerta(String titulo, String header, String contenido) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(header);&#10;        alert.setContentText(contenido);&#10;        alert.showAndWait();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/ColoniaViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/ColoniaViewController.java" />
              <option name="originalContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.ColoniaController;&#10;import com.example.vivienda.model.Colonia;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.TableColumn;&#10;import javafx.scene.control.TableView;&#10;import javafx.scene.control.TextField;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.ComboBox;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;&#10;public class ColoniaViewController {&#10;&#10;    private static ColoniaViewController instance;&#10;&#10;    @FXML&#10;    private TextField nombreField;&#10;    @FXML&#10;    private TextField codigoPostalField;&#10;    @FXML&#10;    private TableView&lt;Colonia&gt; coloniaTable;&#10;    @FXML&#10;    private TableColumn&lt;Colonia, Long&gt; idColumn;&#10;    @FXML&#10;    private TableColumn&lt;Colonia, String&gt; nombreColumn;&#10;    @FXML&#10;    private TableColumn&lt;Colonia, String&gt; codigoPostalColumn;&#10;    @FXML&#10;    private TableColumn&lt;Colonia, Integer&gt; numViviendasColumn;&#10;&#10;    //  Botones con fx:id&#10;    @FXML&#10;    private Button crearButton;&#10;    @FXML&#10;    private Button actualizarButton;&#10;    @FXML&#10;    private Button eliminarButton;&#10;    @FXML&#10;    private Button limpiarButton;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final ColoniaController coloniaController = new ColoniaController();&#10;    private ObservableList&lt;Colonia&gt; todasLasColonias = FXCollections.observableArrayList();&#10;&#10;    public static ColoniaViewController getInstance() {&#10;        return instance;&#10;    }&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        instance = this;&#10;&#10;        idColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;id&quot;));&#10;        nombreColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;nombre&quot;));&#10;        codigoPostalColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;codigoPostal&quot;));&#10;        numViviendasColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;numeroViviendas&quot;));&#10;&#10;        //  Inicializar ComboBox con los atributos de la tabla&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Nombre&quot;,&#10;            &quot;Código Postal&quot;,&#10;            &quot;Nº Viviendas&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar cuando se escribe en el TextField&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            filtrarTabla();&#10;        });&#10;&#10;        //  Listener para cuando se cambia el atributo en el ComboBox&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            filtrarTabla();&#10;        });&#10;&#10;        loadColonias();&#10;&#10;        //  Estado inicial de botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;&#10;        //  Cuando se selecciona una fila&#10;        coloniaTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                onTableSelection(newSelection);&#10;                crearButton.setDisable(true);&#10;                actualizarButton.setDisable(false);&#10;                eliminarButton.setDisable(false);&#10;            } else {&#10;                crearButton.setDisable(false);&#10;                actualizarButton.setDisable(true);&#10;                eliminarButton.setDisable(true);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadColonias() {&#10;        todasLasColonias.setAll(coloniaController.obtenerTodasLasColonias());&#10;        coloniaTable.setItems(todasLasColonias);&#10;        coloniaTable.refresh();&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            coloniaTable.setItems(todasLasColonias);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Colonia&gt; coloniasFiltradas = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Colonia colonia : todasLasColonias) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(colonia.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nombre&quot;:&#10;                    coincide = colonia.getNombre() != null &amp;&amp;&#10;                              colonia.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Código Postal&quot;:&#10;                    coincide = colonia.getCodigoPostal() != null &amp;&amp;&#10;                              colonia.getCodigoPostal().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nº Viviendas&quot;:&#10;                    coincide = String.valueOf(colonia.getNumeroViviendas()).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                coloniasFiltradas.add(colonia);&#10;            }&#10;        }&#10;&#10;        coloniaTable.setItems(coloniasFiltradas);&#10;    }&#10;&#10;    // Método público para refrescar la tabla desde otros controladores&#10;    public void refreshTable() {&#10;        loadColonias();&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreate() {&#10;        String nombre = nombreField.getText().trim();&#10;        String codigoPostal = codigoPostalField.getText().trim();&#10;&#10;        if (nombre.isEmpty() || codigoPostal.isEmpty()) {&#10;            System.out.println(&quot;Por favor, complete todos los campos&quot;);&#10;            return;&#10;        }&#10;&#10;        Colonia colonia = new Colonia();&#10;        colonia.setNombre(nombre);&#10;        colonia.setCodigoPostal(codigoPostal);&#10;        coloniaController.crearColonia(colonia);&#10;        loadColonias();&#10;        clearFields();&#10;&#10;        //  Restaurar botones y limpiar selección&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;        coloniaTable.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    @FXML&#10;    private void handleUpdate() {&#10;        Colonia selectedColonia = coloniaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedColonia != null) {&#10;            String nombre = nombreField.getText().trim();&#10;            String codigoPostal = codigoPostalField.getText().trim();&#10;&#10;            if (nombre.isEmpty() || codigoPostal.isEmpty()) {&#10;                System.out.println(&quot;Por favor, complete todos los campos&quot;);&#10;                return;&#10;            }&#10;&#10;            selectedColonia.setNombre(nombre);&#10;            selectedColonia.setCodigoPostal(codigoPostal);&#10;            coloniaController.actualizarColonia(selectedColonia);&#10;            loadColonias();&#10;            clearFields();&#10;&#10;            //  Restaurar botones y limpiar selección&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            coloniaTable.getSelectionModel().clearSelection();&#10;        } else {&#10;            System.out.println(&quot;Por favor, seleccione una colonia de la tabla&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleDelete() {&#10;        Colonia selectedColonia = coloniaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedColonia != null) {&#10;            coloniaController.eliminarColoniaPorId(selectedColonia.getId());&#10;            loadColonias();&#10;            clearFields();&#10;&#10;            //  Restaurar botones y limpiar selección&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            coloniaTable.getSelectionModel().clearSelection();&#10;        } else {&#10;            System.out.println(&quot;Por favor, seleccione una colonia de la tabla&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleLimpiar() {&#10;        clearFields();&#10;        coloniaTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        // Restaurar botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;    }&#10;&#10;    private void onTableSelection(Colonia selectedColonia) {&#10;        nombreField.setText(selectedColonia.getNombre());&#10;        codigoPostalField.setText(selectedColonia.getCodigoPostal());&#10;    }&#10;&#10;    private void clearFields() {&#10;        nombreField.clear();&#10;        codigoPostalField.clear();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.ColoniaController;&#10;import com.example.vivienda.model.Colonia;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.TableColumn;&#10;import javafx.scene.control.TableView;&#10;import javafx.scene.control.TextField;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.ComboBox;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;&#10;public class ColoniaViewController {&#10;&#10;    private static ColoniaViewController instance;&#10;&#10;    @FXML&#10;    private TextField nombreField;&#10;    @FXML&#10;    private TextField codigoPostalField;&#10;    @FXML&#10;    private TableView&lt;Colonia&gt; coloniaTable;&#10;    @FXML&#10;    private TableColumn&lt;Colonia, Long&gt; idColumn;&#10;    @FXML&#10;    private TableColumn&lt;Colonia, String&gt; nombreColumn;&#10;    @FXML&#10;    private TableColumn&lt;Colonia, String&gt; codigoPostalColumn;&#10;    @FXML&#10;    private TableColumn&lt;Colonia, Integer&gt; numViviendasColumn;&#10;&#10;    //  Botones con fx:id&#10;    @FXML&#10;    private Button crearButton;&#10;    @FXML&#10;    private Button actualizarButton;&#10;    @FXML&#10;    private Button eliminarButton;&#10;    @FXML&#10;    private Button limpiarButton;&#10;    @FXML&#10;    private Button listarButton;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final ColoniaController coloniaController = new ColoniaController();&#10;    private ObservableList&lt;Colonia&gt; todasLasColonias = FXCollections.observableArrayList();&#10;&#10;    public static ColoniaViewController getInstance() {&#10;        return instance;&#10;    }&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        instance = this;&#10;&#10;        idColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;id&quot;));&#10;        nombreColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;nombre&quot;));&#10;        codigoPostalColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;codigoPostal&quot;));&#10;        numViviendasColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;numeroViviendas&quot;));&#10;&#10;        //  Inicializar ComboBox con los atributos de la tabla&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Nombre&quot;,&#10;            &quot;Código Postal&quot;,&#10;            &quot;Nº Viviendas&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar cuando se escribe en el TextField&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            filtrarTabla();&#10;        });&#10;&#10;        //  Listener para cuando se cambia el atributo en el ComboBox&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            filtrarTabla();&#10;        });&#10;&#10;        //  Estado inicial de botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;&#10;        //  Cuando se selecciona una fila&#10;        coloniaTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                onTableSelection(newSelection);&#10;                crearButton.setDisable(true);&#10;                actualizarButton.setDisable(false);&#10;                eliminarButton.setDisable(false);&#10;            } else {&#10;                crearButton.setDisable(false);&#10;                actualizarButton.setDisable(true);&#10;                eliminarButton.setDisable(true);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadColonias() {&#10;        todasLasColonias.setAll(coloniaController.obtenerTodasLasColonias());&#10;        coloniaTable.setItems(todasLasColonias);&#10;        coloniaTable.refresh();&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            coloniaTable.setItems(todasLasColonias);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Colonia&gt; coloniasFiltradas = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Colonia colonia : todasLasColonias) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(colonia.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nombre&quot;:&#10;                    coincide = colonia.getNombre() != null &amp;&amp;&#10;                              colonia.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Código Postal&quot;:&#10;                    coincide = colonia.getCodigoPostal() != null &amp;&amp;&#10;                              colonia.getCodigoPostal().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nº Viviendas&quot;:&#10;                    coincide = String.valueOf(colonia.getNumeroViviendas()).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                coloniasFiltradas.add(colonia);&#10;            }&#10;        }&#10;&#10;        coloniaTable.setItems(coloniasFiltradas);&#10;    }&#10;&#10;    // Método público para refrescar la tabla desde otros controladores&#10;    public void refreshTable() {&#10;        loadColonias();&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreate() {&#10;        String nombre = nombreField.getText().trim();&#10;        String codigoPostal = codigoPostalField.getText().trim();&#10;&#10;        if (nombre.isEmpty() || codigoPostal.isEmpty()) {&#10;            System.out.println(&quot;Por favor, complete todos los campos&quot;);&#10;            return;&#10;        }&#10;&#10;        Colonia colonia = new Colonia();&#10;        colonia.setNombre(nombre);&#10;        colonia.setCodigoPostal(codigoPostal);&#10;        coloniaController.crearColonia(colonia);&#10;        loadColonias();&#10;        clearFields();&#10;&#10;        //  Restaurar botones y limpiar selección&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;        coloniaTable.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    @FXML&#10;    private void handleUpdate() {&#10;        Colonia selectedColonia = coloniaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedColonia != null) {&#10;            String nombre = nombreField.getText().trim();&#10;            String codigoPostal = codigoPostalField.getText().trim();&#10;&#10;            if (nombre.isEmpty() || codigoPostal.isEmpty()) {&#10;                System.out.println(&quot;Por favor, complete todos los campos&quot;);&#10;                return;&#10;            }&#10;&#10;            selectedColonia.setNombre(nombre);&#10;            selectedColonia.setCodigoPostal(codigoPostal);&#10;            coloniaController.actualizarColonia(selectedColonia);&#10;            loadColonias();&#10;            clearFields();&#10;&#10;            //  Restaurar botones y limpiar selección&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            coloniaTable.getSelectionModel().clearSelection();&#10;        } else {&#10;            System.out.println(&quot;Por favor, seleccione una colonia de la tabla&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleDelete() {&#10;        Colonia selectedColonia = coloniaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedColonia != null) {&#10;            coloniaController.eliminarColoniaPorId(selectedColonia.getId());&#10;            loadColonias();&#10;            clearFields();&#10;&#10;            //  Restaurar botones y limpiar selección&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            coloniaTable.getSelectionModel().clearSelection();&#10;        } else {&#10;            System.out.println(&quot;Por favor, seleccione una colonia de la tabla&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleLimpiar() {&#10;        clearFields();&#10;        coloniaTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        // Restaurar botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;    }&#10;&#10;    @FXML&#10;    private void handleListar() {&#10;        loadColonias();&#10;    }&#10;&#10;    private void onTableSelection(Colonia selectedColonia) {&#10;        nombreField.setText(selectedColonia.getNombre());&#10;        codigoPostalField.setText(selectedColonia.getCodigoPostal());&#10;    }&#10;&#10;    private void clearFields() {&#10;        nombreField.clear();&#10;        codigoPostalField.clear();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/DepartamentoViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/DepartamentoViewController.java" />
              <option name="originalContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.DepartamentoController;&#10;import com.example.vivienda.controller.PersonaController;&#10;import com.example.vivienda.controller.EdificioController;&#10;import com.example.vivienda.model.Departamento;&#10;import com.example.vivienda.model.Persona;&#10;import com.example.vivienda.model.Colonia;&#10;import com.example.vivienda.model.Edificio;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.beans.property.SimpleStringProperty;&#10;&#10;public class DepartamentoViewController {&#10;&#10;    @FXML private TextField direccionField;&#10;    @FXML private TextField superficieField;&#10;    @FXML private TextField numeroField;&#10;    @FXML private ComboBox&lt;Edificio&gt; comboEdificio;&#10;    @FXML private ComboBox&lt;Persona&gt; comboPropietario;&#10;    @FXML private TableView&lt;Departamento&gt; departamentoTable;&#10;    @FXML private TableColumn&lt;Departamento, Long&gt; idColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; direccionColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; superficieColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; numeroExteriorColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; numeroColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; edificioColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; coloniaColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; propietarioColumn;&#10;    @FXML private TableColumn&lt;Departamento, Integer&gt; numeroHabitantesColumn;&#10;    @FXML private Button btnCrear;&#10;    @FXML private Button btnActualizar;&#10;    @FXML private Button btnEliminar;&#10;    @FXML private Button btnLimpiar;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final DepartamentoController departamentoController = new DepartamentoController();&#10;    private final PersonaController personaController = new PersonaController();&#10;    private final EdificioController edificioController = new EdificioController();&#10;    private ObservableList&lt;Departamento&gt; todosLosDepartamentos = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        // Configurar columnas&#10;        idColumn.setCellValueFactory(cellData -&gt; new javafx.beans.property.SimpleLongProperty(cellData.getValue().getId()).asObject());&#10;        direccionColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(data.getValue().getDireccion()));&#10;        superficieColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(String.valueOf(data.getValue().getSuperficie())));&#10;&#10;        //  La clave catastral se obtiene del edificio al que pertenece el departamento&#10;        numeroExteriorColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue().getEdificio();&#10;            return new SimpleStringProperty(edificio != null ? edificio.getNumeroExterior() : &quot;N/A&quot;);&#10;        });&#10;&#10;        numeroColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(data.getValue().getNumero()));&#10;&#10;        //  Mostrar el NOMBRE del edificio en lugar de la dirección&#10;        edificioColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue().getEdificio();&#10;            return new SimpleStringProperty(edificio != null ? edificio.getNombre() : &quot;&quot;);&#10;        });&#10;&#10;        //  La colonia se obtiene del edificio al que pertenece el departamento&#10;        coloniaColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue().getEdificio();&#10;            Colonia colonia = edificio != null ? edificio.getColonia() : null;&#10;            return new SimpleStringProperty(colonia != null ? colonia.getNombre() : &quot;&quot;);&#10;        });&#10;&#10;        propietarioColumn.setCellValueFactory(data -&gt; {&#10;            Persona propietario = data.getValue().getPropietario();&#10;            return new SimpleStringProperty(propietario != null ? propietario.toString() : &quot;&quot;);&#10;        });&#10;&#10;        // Columna de número de habitantes&#10;        numeroHabitantesColumn.setCellValueFactory(data -&gt; {&#10;            Departamento depto = data.getValue();&#10;            int numHabitantes = depto.getHabitantes() != null ? depto.getHabitantes().size() : 0;&#10;            return new javafx.beans.property.SimpleObjectProperty&lt;&gt;(numHabitantes);&#10;        });&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Dirección&quot;,&#10;            &quot;Superficie&quot;,&#10;            &quot;Número&quot;,&#10;            &quot;Edificio&quot;,&#10;            &quot;Colonia&quot;,&#10;            &quot;Propietario&quot;,&#10;            &quot;Nº Habitantes&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Cargar datos&#10;        cargarDepartamentos();&#10;        comboEdificio.setItems(FXCollections.observableArrayList(edificioController.obtenerTodosLosEdificios()));&#10;        comboPropietario.setItems(FXCollections.observableArrayList(personaController.obtenerTodasLasPersonas()));&#10;&#10;        // Configurar CellFactory para mostrar elementos en la lista desplegable&#10;        comboEdificio.setCellFactory(param -&gt; new ListCell&lt;Edificio&gt;() {&#10;            @Override&#10;            protected void updateItem(Edificio item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    //  Mostrar el nombre del edificio en el ComboBox&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setCellFactory(param -&gt; new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Configurar buttonCell para mostrar el prompt text cuando no hay selección&#10;        comboEdificio.setButtonCell(new ListCell&lt;Edificio&gt;() {&#10;            @Override&#10;            protected void updateItem(Edificio item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione edificio&quot;);&#10;                } else {&#10;                    //  Mostrar el nombre del edificio cuando está seleccionado&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Inicializar botones&#10;        setButtonsState(true, false, false);&#10;&#10;        // Listener de selección de tabla&#10;        departamentoTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                mostrarDepartamento(newSelection);&#10;                setButtonsState(false, true, true);&#10;            } else {&#10;                setButtonsState(true, false, false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            departamentoTable.setItems(todosLosDepartamentos);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Departamento&gt; departamentosFiltrados = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Departamento depto : todosLosDepartamentos) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(depto.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Dirección&quot;:&#10;                    coincide = depto.getDireccion() != null &amp;&amp;&#10;                              depto.getDireccion().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Superficie&quot;:&#10;                    coincide = String.valueOf(depto.getSuperficie()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Número&quot;:&#10;                    coincide = depto.getNumero() != null &amp;&amp;&#10;                              depto.getNumero().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Edificio&quot;:&#10;                    Edificio e = depto.getEdificio();&#10;                    coincide = e != null &amp;&amp; e.getNombre() != null &amp;&amp;&#10;                              e.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Colonia&quot;:&#10;                    Edificio ed = depto.getEdificio();&#10;                    Colonia c = ed != null ? ed.getColonia() : null;&#10;                    coincide = c != null &amp;&amp; c.getNombre() != null &amp;&amp;&#10;                              c.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Propietario&quot;:&#10;                    Persona p = depto.getPropietario();&#10;                    if (p != null) {&#10;                        String nombreCompleto = p.getNombre() != null ? p.getNombre() : &quot;&quot;;&#10;                        if (p.getFamilia() != null &amp;&amp; p.getFamilia().getApellidos() != null) {&#10;                            nombreCompleto += &quot; &quot; + p.getFamilia().getApellidos();&#10;                        }&#10;                        coincide = nombreCompleto.toLowerCase().contains(textoMinusculas);&#10;                    }&#10;                    break;&#10;                case &quot;Nº Habitantes&quot;:&#10;                    int numHabitantes = depto.getHabitantes() != null ? depto.getHabitantes().size() : 0;&#10;                    coincide = String.valueOf(numHabitantes).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                departamentosFiltrados.add(depto);&#10;            }&#10;        }&#10;&#10;        departamentoTable.setItems(departamentosFiltrados);&#10;    }&#10;&#10;    private void cargarDepartamentos() {&#10;        todosLosDepartamentos.setAll(departamentoController.obtenerTodosLosDepartamentos());&#10;        departamentoTable.setItems(todosLosDepartamentos);&#10;    }&#10;&#10;    private void mostrarDepartamento(Departamento depto) {&#10;        if (depto != null) {&#10;            direccionField.setText(depto.getDireccion());&#10;            superficieField.setText(String.valueOf(depto.getSuperficie()));&#10;            numeroField.setText(depto.getNumero());&#10;            comboEdificio.setValue(depto.getEdificio());&#10;            comboPropietario.setValue(depto.getPropietario());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void agregarDepartamento() {&#10;        if (!validarCampos()) return;&#10;&#10;        try {&#10;            String direccion = direccionField.getText().trim();&#10;            double superficie = Double.parseDouble(superficieField.getText().trim());&#10;            String numero = numeroField.getText().trim();&#10;            Edificio edificio = comboEdificio.getValue();&#10;            Persona propietario = comboPropietario.getValue();&#10;&#10;            //  La colonia se obtiene automáticamente del edificio&#10;            Colonia colonia = edificio != null ? edificio.getColonia() : null;&#10;&#10;            //  El departamento no tiene clave catastral propia, usamos null o una clave generada&#10;            // Como Vivienda requiere claveCatastral, generamos una temporal o usamos la del edificio + número&#10;            String claveCatastralGenerada = edificio != null ? edificio.getNumeroExterior() + &quot;-&quot; + numero : &quot;TEMP-&quot; + numero;&#10;&#10;            Departamento departamento = new Departamento(direccion, superficie, claveCatastralGenerada, propietario, colonia, numero);&#10;            departamento.setEdificio(edificio);&#10;&#10;            // Asegurar consistencia bidireccional: que la persona propietaria apunte a esta vivienda&#10;            if (propietario != null) {&#10;                propietario.setVivienda(departamento);&#10;            }&#10;&#10;            departamentoController.agregarDepartamento(departamento);&#10;            postAction();&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            mostrarAlerta(&quot;Error al agregar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al crear el departamento: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void actualizarDepartamento() {&#10;        Departamento seleccionado = departamentoTable.getSelectionModel().getSelectedItem();&#10;        if (seleccionado == null) return;&#10;        if (!validarCampos()) return;&#10;&#10;        try {&#10;            seleccionado.setDireccion(direccionField.getText().trim());&#10;            seleccionado.setSuperficie(Double.parseDouble(superficieField.getText().trim()));&#10;            seleccionado.setNumero(numeroField.getText().trim());&#10;&#10;            Edificio edificio = comboEdificio.getValue();&#10;            seleccionado.setEdificio(edificio);&#10;&#10;            //  La colonia se obtiene automáticamente del edificio&#10;            Colonia colonia = edificio != null ? edificio.getColonia() : null;&#10;            seleccionado.setColonia(colonia);&#10;&#10;            // Actualizar clave catastral generada&#10;            String claveCatastralGenerada = edificio != null ? edificio.getNumeroExterior() + &quot;-&quot; + seleccionado.getNumero() : &quot;TEMP-&quot; + seleccionado.getNumero();&#10;            seleccionado.setNumeroExterior(claveCatastralGenerada);&#10;&#10;            seleccionado.setPropietario(comboPropietario.getValue());&#10;&#10;            // Asegurar consistencia bidireccional&#10;            if (seleccionado.getPropietario() != null) {&#10;                seleccionado.getPropietario().setVivienda(seleccionado);&#10;            }&#10;&#10;            departamentoController.actualizarDepartamento(seleccionado);&#10;            postAction();&#10;        } catch (Exception e) {&#10;            mostrarAlerta(&quot;Error al editar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al actualizar el departamento.&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void eliminarDepartamento() {&#10;        Departamento seleccionado = departamentoTable.getSelectionModel().getSelectedItem();&#10;        if (seleccionado == null) return;&#10;&#10;        departamentoController.eliminarDepartamento((int) seleccionado.getId());&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarCampos() {&#10;        direccionField.clear();&#10;        superficieField.clear();&#10;        numeroField.clear();&#10;        comboEdificio.setValue(null);&#10;        comboPropietario.setValue(null);&#10;        departamentoTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        setButtonsState(true, false, false);&#10;&#10;        // Forzar refresco visual de ComboBox&#10;        comboEdificio.setButtonCell(new ListCell&lt;Edificio&gt;() {&#10;            @Override&#10;            protected void updateItem(Edificio item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione edificio&quot;);&#10;                } else {&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private boolean validarCampos() {&#10;        String mensaje = &quot;&quot;;&#10;&#10;        if (direccionField.getText() == null || direccionField.getText().trim().isEmpty()) {&#10;            mensaje += &quot;La dirección es obligatoria.\n&quot;;&#10;        }&#10;&#10;        if (superficieField.getText() == null || superficieField.getText().trim().isEmpty()) {&#10;            mensaje += &quot;La superficie es obligatoria.\n&quot;;&#10;        } else {&#10;            try {&#10;                double sup = Double.parseDouble(superficieField.getText().trim());&#10;                if (sup &lt;= 0) {&#10;                    mensaje += &quot;La superficie debe ser mayor a 0.\n&quot;;&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                mensaje += &quot;La superficie debe ser un número válido.\n&quot;;&#10;            }&#10;        }&#10;&#10;        if (numeroField.getText() == null || numeroField.getText().trim().isEmpty()) {&#10;            mensaje += &quot;El número interior es obligatorio.\n&quot;;&#10;        }&#10;&#10;        if (comboEdificio.getValue() == null) {&#10;            mensaje += &quot;Debe seleccionar un edificio.\n&quot;;&#10;        }&#10;&#10;        if (comboPropietario.getValue() == null) {&#10;            mensaje += &quot;Debe seleccionar un propietario.\n&quot;;&#10;        }&#10;&#10;        if (!mensaje.isEmpty()) {&#10;            mostrarAlerta(&quot;Validación de campos&quot;, &quot;Campos incompletos o inválidos&quot;, mensaje);&#10;            return false;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void postAction() {&#10;        cargarDepartamentos();&#10;        limpiarCampos();&#10;&#10;        //  Refrescar la tabla de colonias para actualizar el número de viviendas&#10;        if (ColoniaViewController.getInstance() != null) {&#10;            ColoniaViewController.getInstance().refreshTable();&#10;        }&#10;&#10;        //  Refrescar la tabla de edificios para actualizar el número de apartamentos&#10;        if (EdificioViewController.getInstance() != null) {&#10;            EdificioViewController.getInstance().refreshTable();&#10;        }&#10;    }&#10;&#10;    private void setButtonsState(boolean crear, boolean actualizar, boolean eliminar) {&#10;        btnCrear.setDisable(!crear);&#10;        btnActualizar.setDisable(!actualizar);&#10;        btnEliminar.setDisable(!eliminar);&#10;    }&#10;&#10;    private void mostrarAlerta(String titulo, String encabezado, String contenido) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(encabezado);&#10;        alert.setContentText(contenido);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.DepartamentoController;&#10;import com.example.vivienda.controller.PersonaController;&#10;import com.example.vivienda.controller.EdificioController;&#10;import com.example.vivienda.model.Departamento;&#10;import com.example.vivienda.model.Persona;&#10;import com.example.vivienda.model.Colonia;&#10;import com.example.vivienda.model.Edificio;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.beans.property.SimpleStringProperty;&#10;&#10;public class DepartamentoViewController {&#10;&#10;    @FXML private TextField direccionField;&#10;    @FXML private TextField superficieField;&#10;    @FXML private TextField numeroField;&#10;    @FXML private ComboBox&lt;Edificio&gt; comboEdificio;&#10;    @FXML private ComboBox&lt;Persona&gt; comboPropietario;&#10;    @FXML private TableView&lt;Departamento&gt; departamentoTable;&#10;    @FXML private TableColumn&lt;Departamento, Long&gt; idColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; direccionColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; superficieColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; numeroExteriorColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; numeroColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; edificioColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; coloniaColumn;&#10;    @FXML private TableColumn&lt;Departamento, String&gt; propietarioColumn;&#10;    @FXML private TableColumn&lt;Departamento, Integer&gt; numeroHabitantesColumn;&#10;    @FXML private Button btnCrear;&#10;    @FXML private Button btnActualizar;&#10;    @FXML private Button btnEliminar;&#10;    @FXML private Button btnLimpiar;&#10;    @FXML private Button btnListar;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final DepartamentoController departamentoController = new DepartamentoController();&#10;    private final PersonaController personaController = new PersonaController();&#10;    private final EdificioController edificioController = new EdificioController();&#10;    private ObservableList&lt;Departamento&gt; todosLosDepartamentos = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        // Configurar columnas&#10;        idColumn.setCellValueFactory(cellData -&gt; new javafx.beans.property.SimpleLongProperty(cellData.getValue().getId()).asObject());&#10;        direccionColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(data.getValue().getDireccion()));&#10;        superficieColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(String.valueOf(data.getValue().getSuperficie())));&#10;&#10;        //  La clave catastral se obtiene del edificio al que pertenece el departamento&#10;        numeroExteriorColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue().getEdificio();&#10;            return new SimpleStringProperty(edificio != null ? edificio.getNumeroExterior() : &quot;N/A&quot;);&#10;        });&#10;&#10;        numeroColumn.setCellValueFactory(data -&gt; new SimpleStringProperty(data.getValue().getNumero()));&#10;&#10;        //  Mostrar el NOMBRE del edificio en lugar de la dirección&#10;        edificioColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue().getEdificio();&#10;            return new SimpleStringProperty(edificio != null ? edificio.getNombre() : &quot;&quot;);&#10;        });&#10;&#10;        //  La colonia se obtiene del edificio al que pertenece el departamento&#10;        coloniaColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue().getEdificio();&#10;            Colonia colonia = edificio != null ? edificio.getColonia() : null;&#10;            return new SimpleStringProperty(colonia != null ? colonia.getNombre() : &quot;&quot;);&#10;        });&#10;&#10;        propietarioColumn.setCellValueFactory(data -&gt; {&#10;            Persona propietario = data.getValue().getPropietario();&#10;            return new SimpleStringProperty(propietario != null ? propietario.toString() : &quot;&quot;);&#10;        });&#10;&#10;        // Columna de número de habitantes&#10;        numeroHabitantesColumn.setCellValueFactory(data -&gt; {&#10;            Departamento depto = data.getValue();&#10;            int numHabitantes = depto.getHabitantes() != null ? depto.getHabitantes().size() : 0;&#10;            return new javafx.beans.property.SimpleObjectProperty&lt;&gt;(numHabitantes);&#10;        });&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Dirección&quot;,&#10;            &quot;Superficie&quot;,&#10;            &quot;Número&quot;,&#10;            &quot;Edificio&quot;,&#10;            &quot;Colonia&quot;,&#10;            &quot;Propietario&quot;,&#10;            &quot;Nº Habitantes&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Cargar datos&#10;        comboEdificio.setItems(FXCollections.observableArrayList(edificioController.obtenerTodosLosEdificios()));&#10;        comboPropietario.setItems(FXCollections.observableArrayList(personaController.obtenerTodasLasPersonas()));&#10;&#10;        // Configurar CellFactory para mostrar elementos en la lista desplegable&#10;        comboEdificio.setCellFactory(param -&gt; new ListCell&lt;Edificio&gt;() {&#10;            @Override&#10;            protected void updateItem(Edificio item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    //  Mostrar el nombre del edificio en el ComboBox&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setCellFactory(param -&gt; new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Configurar buttonCell para mostrar el prompt text cuando no hay selección&#10;        comboEdificio.setButtonCell(new ListCell&lt;Edificio&gt;() {&#10;            @Override&#10;            protected void updateItem(Edificio item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione edificio&quot;);&#10;                } else {&#10;                    //  Mostrar el nombre del edificio cuando está seleccionado&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Inicializar botones&#10;        setButtonsState(true, false, false);&#10;&#10;        // Listener de selección de tabla&#10;        departamentoTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                mostrarDepartamento(newSelection);&#10;                setButtonsState(false, true, true);&#10;            } else {&#10;                setButtonsState(true, false, false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            departamentoTable.setItems(todosLosDepartamentos);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Departamento&gt; departamentosFiltrados = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Departamento depto : todosLosDepartamentos) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(depto.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Dirección&quot;:&#10;                    coincide = depto.getDireccion() != null &amp;&amp;&#10;                              depto.getDireccion().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Superficie&quot;:&#10;                    coincide = String.valueOf(depto.getSuperficie()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Número&quot;:&#10;                    coincide = depto.getNumero() != null &amp;&amp;&#10;                              depto.getNumero().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Edificio&quot;:&#10;                    Edificio e = depto.getEdificio();&#10;                    coincide = e != null &amp;&amp; e.getNombre() != null &amp;&amp;&#10;                              e.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Colonia&quot;:&#10;                    Edificio ed = depto.getEdificio();&#10;                    Colonia c = ed != null ? ed.getColonia() : null;&#10;                    coincide = c != null &amp;&amp; c.getNombre() != null &amp;&amp;&#10;                              c.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Propietario&quot;:&#10;                    Persona p = depto.getPropietario();&#10;                    if (p != null) {&#10;                        String nombreCompleto = p.getNombre() != null ? p.getNombre() : &quot;&quot;;&#10;                        if (p.getFamilia() != null &amp;&amp; p.getFamilia().getApellidos() != null) {&#10;                            nombreCompleto += &quot; &quot; + p.getFamilia().getApellidos();&#10;                        }&#10;                        coincide = nombreCompleto.toLowerCase().contains(textoMinusculas);&#10;                    }&#10;                    break;&#10;                case &quot;Nº Habitantes&quot;:&#10;                    int numHabitantes = depto.getHabitantes() != null ? depto.getHabitantes().size() : 0;&#10;                    coincide = String.valueOf(numHabitantes).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                departamentosFiltrados.add(depto);&#10;            }&#10;        }&#10;&#10;        departamentoTable.setItems(departamentosFiltrados);&#10;    }&#10;&#10;    private void cargarDepartamentos() {&#10;        todosLosDepartamentos.setAll(departamentoController.obtenerTodosLosDepartamentos());&#10;        departamentoTable.setItems(todosLosDepartamentos);&#10;    }&#10;&#10;    private void mostrarDepartamento(Departamento depto) {&#10;        if (depto != null) {&#10;            direccionField.setText(depto.getDireccion());&#10;            superficieField.setText(String.valueOf(depto.getSuperficie()));&#10;            numeroField.setText(depto.getNumero());&#10;            comboEdificio.setValue(depto.getEdificio());&#10;            comboPropietario.setValue(depto.getPropietario());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void agregarDepartamento() {&#10;        if (!validarCampos()) return;&#10;&#10;        try {&#10;            String direccion = direccionField.getText().trim();&#10;            double superficie = Double.parseDouble(superficieField.getText().trim());&#10;            String numero = numeroField.getText().trim();&#10;            Edificio edificio = comboEdificio.getValue();&#10;            Persona propietario = comboPropietario.getValue();&#10;&#10;            //  La colonia se obtiene automáticamente del edificio&#10;            Colonia colonia = edificio != null ? edificio.getColonia() : null;&#10;&#10;            //  El departamento no tiene clave catastral propia, usamos null o una clave generada&#10;            // Como Vivienda requiere claveCatastral, generamos una temporal o usamos la del edificio + número&#10;            String claveCatastralGenerada = edificio != null ? edificio.getNumeroExterior() + &quot;-&quot; + numero : &quot;TEMP-&quot; + numero;&#10;&#10;            Departamento departamento = new Departamento(direccion, superficie, claveCatastralGenerada, propietario, colonia, numero);&#10;            departamento.setEdificio(edificio);&#10;&#10;            // Asegurar consistencia bidireccional: que la persona propietaria apunte a esta vivienda&#10;            if (propietario != null) {&#10;                propietario.setVivienda(departamento);&#10;            }&#10;&#10;            departamentoController.agregarDepartamento(departamento);&#10;            postAction();&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            mostrarAlerta(&quot;Error al agregar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al crear el departamento: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void actualizarDepartamento() {&#10;        Departamento seleccionado = departamentoTable.getSelectionModel().getSelectedItem();&#10;        if (seleccionado == null) return;&#10;        if (!validarCampos()) return;&#10;&#10;        try {&#10;            seleccionado.setDireccion(direccionField.getText().trim());&#10;            seleccionado.setSuperficie(Double.parseDouble(superficieField.getText().trim()));&#10;            seleccionado.setNumero(numeroField.getText().trim());&#10;&#10;            Edificio edificio = comboEdificio.getValue();&#10;            seleccionado.setEdificio(edificio);&#10;&#10;            //  La colonia se obtiene automáticamente del edificio&#10;            Colonia colonia = edificio != null ? edificio.getColonia() : null;&#10;            seleccionado.setColonia(colonia);&#10;&#10;            // Actualizar clave catastral generada&#10;            String claveCatastralGenerada = edificio != null ? edificio.getNumeroExterior() + &quot;-&quot; + seleccionado.getNumero() : &quot;TEMP-&quot; + seleccionado.getNumero();&#10;            seleccionado.setNumeroExterior(claveCatastralGenerada);&#10;&#10;            seleccionado.setPropietario(comboPropietario.getValue());&#10;&#10;            // Asegurar consistencia bidireccional&#10;            if (seleccionado.getPropietario() != null) {&#10;                seleccionado.getPropietario().setVivienda(seleccionado);&#10;            }&#10;&#10;            departamentoController.actualizarDepartamento(seleccionado);&#10;            postAction();&#10;        } catch (Exception e) {&#10;            mostrarAlerta(&quot;Error al editar&quot;, &quot;Error inesperado&quot;, &quot;Ocurrió un error al actualizar el departamento.&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void eliminarDepartamento() {&#10;        Departamento seleccionado = departamentoTable.getSelectionModel().getSelectedItem();&#10;        if (seleccionado == null) return;&#10;&#10;        departamentoController.eliminarDepartamento((int) seleccionado.getId());&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarCampos() {&#10;        direccionField.clear();&#10;        superficieField.clear();&#10;        numeroField.clear();&#10;        comboEdificio.setValue(null);&#10;        comboPropietario.setValue(null);&#10;        departamentoTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        setButtonsState(true, false, false);&#10;&#10;        // Forzar refresco visual de ComboBox&#10;        comboEdificio.setButtonCell(new ListCell&lt;Edificio&gt;() {&#10;            @Override&#10;            protected void updateItem(Edificio item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione edificio&quot;);&#10;                } else {&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @FXML&#10;    private void listarDepartamentos() {&#10;        cargarDepartamentos();&#10;    }&#10;&#10;    private boolean validarCampos() {&#10;        String mensaje = &quot;&quot;;&#10;&#10;        if (direccionField.getText() == null || direccionField.getText().trim().isEmpty()) {&#10;            mensaje += &quot;La dirección es obligatoria.\n&quot;;&#10;        }&#10;&#10;        if (superficieField.getText() == null || superficieField.getText().trim().isEmpty()) {&#10;            mensaje += &quot;La superficie es obligatoria.\n&quot;;&#10;        } else {&#10;            try {&#10;                double sup = Double.parseDouble(superficieField.getText().trim());&#10;                if (sup &lt;= 0) {&#10;                    mensaje += &quot;La superficie debe ser mayor a 0.\n&quot;;&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                mensaje += &quot;La superficie debe ser un número válido.\n&quot;;&#10;            }&#10;        }&#10;&#10;        if (numeroField.getText() == null || numeroField.getText().trim().isEmpty()) {&#10;            mensaje += &quot;El número interior es obligatorio.\n&quot;;&#10;        }&#10;&#10;        if (comboEdificio.getValue() == null) {&#10;            mensaje += &quot;Debe seleccionar un edificio.\n&quot;;&#10;        }&#10;&#10;        if (comboPropietario.getValue() == null) {&#10;            mensaje += &quot;Debe seleccionar un propietario.\n&quot;;&#10;        }&#10;&#10;        if (!mensaje.isEmpty()) {&#10;            mostrarAlerta(&quot;Validación de campos&quot;, &quot;Campos incompletos o inválidos&quot;, mensaje);&#10;            return false;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void postAction() {&#10;        cargarDepartamentos();&#10;        limpiarCampos();&#10;&#10;        //  Refrescar la tabla de colonias para actualizar el número de viviendas&#10;        if (ColoniaViewController.getInstance() != null) {&#10;            ColoniaViewController.getInstance().refreshTable();&#10;        }&#10;&#10;        //  Refrescar la tabla de edificios para actualizar el número de apartamentos&#10;        if (EdificioViewController.getInstance() != null) {&#10;            EdificioViewController.getInstance().refreshTable();&#10;        }&#10;    }&#10;&#10;    private void setButtonsState(boolean crear, boolean actualizar, boolean eliminar) {&#10;        btnCrear.setDisable(!crear);&#10;        btnActualizar.setDisable(!actualizar);&#10;        btnEliminar.setDisable(!eliminar);&#10;    }&#10;&#10;    private void mostrarAlerta(String titulo, String encabezado, String contenido) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(encabezado);&#10;        alert.setContentText(contenido);&#10;        alert.showAndWait();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/EdificioViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/EdificioViewController.java" />
              <option name="originalContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.EdificioController;&#10;import com.example.vivienda.controller.ColoniaController;&#10;import com.example.vivienda.controller.PersonaController;&#10;import com.example.vivienda.controller.DepartamentoController;&#10;import com.example.vivienda.model.Edificio;&#10;import com.example.vivienda.model.Colonia;&#10;import com.example.vivienda.model.Persona;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Alert;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.ComboBox;&#10;import javafx.scene.control.ListCell;&#10;import javafx.scene.control.TableColumn;&#10;import javafx.scene.control.TableView;&#10;import javafx.scene.control.TextField;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.beans.property.SimpleIntegerProperty;&#10;&#10;public class EdificioViewController {&#10;&#10;    private static EdificioViewController instance;&#10;&#10;    @FXML&#10;    private TextField nombreField;&#10;    @FXML&#10;    private TextField direccionField;&#10;    @FXML&#10;    private TextField superficieField;&#10;    @FXML&#10;    private TextField numeroExteriorField;&#10;    @FXML&#10;    private ComboBox&lt;Colonia&gt; comboColonia;&#10;    @FXML&#10;    private ComboBox&lt;Persona&gt; comboPropietario;&#10;    @FXML&#10;    private TableView&lt;Edificio&gt; edificioTable;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, Long&gt; idColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; nombreColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; direccionColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, Double&gt; superficieColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; numeroExteriorColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; coloniaColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; propietarioColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, Integer&gt; numApartamentosColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, Integer&gt; numeroHabitantesColumn;&#10;&#10;    @FXML&#10;    private Button crearButton;&#10;    @FXML&#10;    private Button actualizarButton;&#10;    @FXML&#10;    private Button eliminarButton;&#10;    @FXML&#10;    private Button limpiarButton;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final EdificioController edificioController = new EdificioController();&#10;    private final ColoniaController coloniaController = new ColoniaController();&#10;    private final PersonaController personaController = new PersonaController();&#10;    private final DepartamentoController departamentoController = new DepartamentoController();&#10;    private ObservableList&lt;Edificio&gt; todosLosEdificios = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        instance = this;&#10;&#10;        idColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;id&quot;));&#10;        nombreColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;nombre&quot;));&#10;        direccionColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;direccion&quot;));&#10;        superficieColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;superficie&quot;));&#10;        numeroExteriorColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;numeroExterior&quot;));&#10;&#10;        // Columna de colonia&#10;        coloniaColumn.setCellValueFactory(data -&gt; {&#10;            Colonia colonia = data.getValue().getColonia();&#10;            return new SimpleStringProperty(colonia != null ? colonia.getNombre() : &quot;&quot;);&#10;        });&#10;&#10;        // Columna de propietario&#10;        propietarioColumn.setCellValueFactory(data -&gt; {&#10;            Persona propietario = data.getValue().getPropietario();&#10;            return new SimpleStringProperty(propietario != null ? propietario.toString() : &quot;&quot;);&#10;        });&#10;&#10;        //  Columna de número de apartamentos - calculado automáticamente&#10;        numApartamentosColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue();&#10;            long count = departamentoController.obtenerTodosLosDepartamentos().stream()&#10;                    .filter(depto -&gt; depto.getEdificio() != null &amp;&amp; depto.getEdificio().getId() == edificio.getId())&#10;                    .count();&#10;            return new SimpleIntegerProperty((int) count).asObject();&#10;        });&#10;&#10;        //  Columna de número de habitantes - suma de habitantes de todos los departamentos&#10;        numeroHabitantesColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue();&#10;            int totalHabitantes = departamentoController.obtenerTodosLosDepartamentos().stream()&#10;                    .filter(depto -&gt; depto.getEdificio() != null &amp;&amp; depto.getEdificio().getId() == edificio.getId())&#10;                    .mapToInt(depto -&gt; depto.getHabitantes() != null ? depto.getHabitantes().size() : 0)&#10;                    .sum();&#10;            return new SimpleIntegerProperty(totalHabitantes).asObject();&#10;        });&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Nombre&quot;,&#10;            &quot;Dirección&quot;,&#10;            &quot;Superficie&quot;,&#10;            &quot;Número Exterior&quot;,&#10;            &quot;Colonia&quot;,&#10;            &quot;Propietario&quot;,&#10;            &quot;Nº Apartamentos&quot;,&#10;            &quot;Nº Habitantes&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Cargar datos&#10;        loadEdificios();&#10;        comboColonia.setItems(FXCollections.observableArrayList(coloniaController.obtenerTodasLasColonias()));&#10;        comboPropietario.setItems(FXCollections.observableArrayList(personaController.obtenerTodasLasPersonas()));&#10;&#10;        // Configurar CellFactory para el ComboBox de Colonia&#10;        comboColonia.setCellFactory(param -&gt; new ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboColonia.setButtonCell(new ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione colonia&quot;);&#10;                } else {&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Configurar CellFactory para el ComboBox de Propietario&#10;        comboPropietario.setCellFactory(param -&gt; new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Inicializar botones&#10;        setButtonsState(true, false, false);&#10;&#10;        // Listener de selección de tabla&#10;        edificioTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                onTableSelection(newSelection);&#10;                setButtonsState(false, true, true);&#10;            } else {&#10;                limpiarCampos();&#10;            }&#10;        });&#10;&#10;        // Botón limpiar&#10;        limpiarButton.setOnAction(e -&gt; limpiarCampos());&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            edificioTable.setItems(todosLosEdificios);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Edificio&gt; edificiosFiltrados = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Edificio edificio : todosLosEdificios) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(edificio.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nombre&quot;:&#10;                    coincide = edificio.getNombre() != null &amp;&amp;&#10;                              edificio.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Dirección&quot;:&#10;                    coincide = edificio.getDireccion() != null &amp;&amp;&#10;                              edificio.getDireccion().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Superficie&quot;:&#10;                    coincide = String.valueOf(edificio.getSuperficie()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Número Exterior&quot;:&#10;                    coincide = edificio.getNumeroExterior() != null &amp;&amp;&#10;                              edificio.getNumeroExterior().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Colonia&quot;:&#10;                    Colonia c = edificio.getColonia();&#10;                    coincide = c != null &amp;&amp; c.getNombre() != null &amp;&amp;&#10;                              c.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Propietario&quot;:&#10;                    Persona p = edificio.getPropietario();&#10;                    if (p != null) {&#10;                        String nombreCompleto = p.getNombre() != null ? p.getNombre() : &quot;&quot;;&#10;                        if (p.getFamilia() != null &amp;&amp; p.getFamilia().getApellidos() != null) {&#10;                            nombreCompleto += &quot; &quot; + p.getFamilia().getApellidos();&#10;                        }&#10;                        coincide = nombreCompleto.toLowerCase().contains(textoMinusculas);&#10;                    }&#10;                    break;&#10;                case &quot;Nº Apartamentos&quot;:&#10;                    long count = departamentoController.obtenerTodosLosDepartamentos().stream()&#10;                            .filter(depto -&gt; depto.getEdificio() != null &amp;&amp; depto.getEdificio().getId() == edificio.getId())&#10;                            .count();&#10;                    coincide = String.valueOf(count).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nº Habitantes&quot;:&#10;                    int totalHabitantes = departamentoController.obtenerTodosLosDepartamentos().stream()&#10;                            .filter(depto -&gt; depto.getEdificio() != null &amp;&amp; depto.getEdificio().getId() == edificio.getId())&#10;                            .mapToInt(depto -&gt; depto.getHabitantes() != null ? depto.getHabitantes().size() : 0)&#10;                            .sum();&#10;                    coincide = String.valueOf(totalHabitantes).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                edificiosFiltrados.add(edificio);&#10;            }&#10;        }&#10;&#10;        edificioTable.setItems(edificiosFiltrados);&#10;    }&#10;&#10;    private void loadEdificios() {&#10;        todosLosEdificios.setAll(edificioController.obtenerTodosLosEdificios());&#10;        edificioTable.setItems(todosLosEdificios);&#10;        edificioTable.refresh();&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreate() {&#10;        if (!validarCampos()) return;&#10;&#10;        // Validar número exterior duplicado en la misma dirección&#10;        String direccionIngresada = direccionField.getText().trim();&#10;        String numeroExteriorIngresado = numeroExteriorField.getText().trim();&#10;&#10;        boolean numeroDuplicado = edificioController.obtenerTodosLosEdificios().stream()&#10;                .anyMatch(e -&gt; e.getDireccion() != null &amp;&amp; e.getDireccion().trim().equalsIgnoreCase(direccionIngresada) &amp;&amp;&#10;                              e.getNumeroExterior() != null &amp;&amp; e.getNumeroExterior().equals(numeroExteriorIngresado));&#10;&#10;        if (numeroDuplicado) {&#10;            mostrarAlerta(&quot;Error al crear edificio&quot;, &quot;Número Exterior duplicado&quot;,&#10;                    &quot;Ya existe una vivienda con el número exterior &quot; + numeroExteriorIngresado + &quot; en la dirección &quot; + direccionIngresada + &quot;.&quot;);&#10;            return;&#10;        }&#10;&#10;        Edificio edificio = new Edificio();&#10;        edificio.setNombre(nombreField.getText());&#10;        edificio.setDireccion(direccionField.getText());&#10;        edificio.setSuperficie(Double.parseDouble(superficieField.getText()));&#10;        edificio.setNumeroExterior(numeroExteriorField.getText());&#10;        edificio.setColonia(comboColonia.getValue());&#10;        edificio.setPropietario(comboPropietario.getValue());&#10;&#10;        // Mantener consistencia bidireccional&#10;        if (edificio.getPropietario() != null) {&#10;            edificio.getPropietario().setVivienda(edificio);&#10;        }&#10;&#10;        edificioController.crearEdificio(edificio);&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void handleUpdate() {&#10;        Edificio selectedEdificio = edificioTable.getSelectionModel().getSelectedItem();&#10;        if (selectedEdificio == null) return;&#10;        if (!validarCampos()) return;&#10;&#10;        String direccionIngresada = direccionField.getText().trim();&#10;        String numeroExteriorIngresado = numeroExteriorField.getText().trim();&#10;        String direccionOriginal = selectedEdificio.getDireccion() != null ? selectedEdificio.getDireccion().trim() : &quot;&quot;;&#10;        String numeroExteriorOriginal = selectedEdificio.getNumeroExterior() != null ? selectedEdificio.getNumeroExterior() : &quot;&quot;;&#10;&#10;        if (!direccionOriginal.equalsIgnoreCase(direccionIngresada) || !numeroExteriorOriginal.equals(numeroExteriorIngresado)) {&#10;            boolean numeroDuplicado = edificioController.obtenerTodosLosEdificios().stream()&#10;                    .anyMatch(e -&gt; e.getDireccion() != null &amp;&amp; e.getDireccion().trim().equalsIgnoreCase(direccionIngresada) &amp;&amp;&#10;                                   e.getNumeroExterior() != null &amp;&amp; e.getNumeroExterior().equals(numeroExteriorIngresado) &amp;&amp;&#10;                                   e.getId() != selectedEdificio.getId());&#10;            if (numeroDuplicado) {&#10;                mostrarAlerta(&quot;Error al actualizar edificio&quot;, &quot;Número Exterior duplicado&quot;,&#10;                        &quot;Ya existe una vivienda con el número exterior &quot; + numeroExteriorIngresado + &quot; en la dirección &quot; + direccionIngresada + &quot;.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        selectedEdificio.setNombre(nombreField.getText());&#10;        selectedEdificio.setDireccion(direccionField.getText());&#10;        selectedEdificio.setSuperficie(Double.parseDouble(superficieField.getText()));&#10;        selectedEdificio.setNumeroExterior(numeroExteriorField.getText());&#10;        selectedEdificio.setColonia(comboColonia.getValue());&#10;        selectedEdificio.setPropietario(comboPropietario.getValue());&#10;&#10;        // Mantener consistencia bidireccional&#10;        if (selectedEdificio.getPropietario() != null) {&#10;            selectedEdificio.getPropietario().setVivienda(selectedEdificio);&#10;        }&#10;&#10;        edificioController.actualizarEdificio(selectedEdificio);&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void handleDelete() {&#10;        Edificio selectedEdificio = edificioTable.getSelectionModel().getSelectedItem();&#10;        if (selectedEdificio == null) return;&#10;&#10;        edificioController.eliminarEdificioPorId(selectedEdificio.getId());&#10;        postAction();&#10;    }&#10;&#10;    private void postAction() {&#10;        limpiarCampos();&#10;        loadEdificios();&#10;        edificioTable.getSelectionModel().clearSelection();&#10;&#10;        //  Refrescar la tabla de colonias para actualizar el número de viviendas&#10;        if (ColoniaViewController.getInstance() != null) {&#10;            ColoniaViewController.getInstance().refreshTable();&#10;        }&#10;    }&#10;&#10;    private void onTableSelection(Edificio selectedEdificio) {&#10;        nombreField.setText(selectedEdificio.getNombre());&#10;        direccionField.setText(selectedEdificio.getDireccion());&#10;        superficieField.setText(String.valueOf(selectedEdificio.getSuperficie()));&#10;        numeroExteriorField.setText(selectedEdificio.getNumeroExterior());&#10;        comboColonia.setValue(selectedEdificio.getColonia());&#10;        comboPropietario.setValue(selectedEdificio.getPropietario());&#10;    }&#10;&#10;    // Limpiar campos y restablecer botones (misma dinámica que Persona)&#10;    private void limpiarCampos() {&#10;        nombreField.clear();&#10;        direccionField.clear();&#10;        superficieField.clear();&#10;        numeroExteriorField.clear();&#10;        comboColonia.setValue(null);&#10;        comboPropietario.setValue(null);&#10;        setButtonsState(true, false, false);&#10;    }&#10;&#10;    private void setButtonsState(boolean crear, boolean actualizar, boolean eliminar) {&#10;        crearButton.setDisable(!crear);&#10;        actualizarButton.setDisable(!actualizar);&#10;        eliminarButton.setDisable(!eliminar);&#10;    }&#10;&#10;    private boolean validarCampos() {&#10;        if (nombreField.getText().isEmpty() || direccionField.getText().isEmpty() || superficieField.getText().isEmpty() ||&#10;                numeroExteriorField.getText().isEmpty()) {&#10;            mostrarAlerta(&quot;Campos incompletos&quot;, &quot;Error de validación&quot;, &quot;Por favor complete todos los campos obligatorios.&quot;);&#10;            return false;&#10;        }&#10;        try {&#10;            Double.parseDouble(superficieField.getText());&#10;        } catch (NumberFormatException e) {&#10;            mostrarAlerta(&quot;Error de formato&quot;, &quot;Campos numéricos inválidos&quot;, &quot;La superficie debe ser un valor numérico.&quot;);&#10;            return false;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void mostrarAlerta(String titulo, String header, String contenido) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(header);&#10;        alert.setContentText(contenido);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    public static EdificioViewController getInstance() {&#10;        return instance;&#10;    }&#10;&#10;    public void refreshTable() {&#10;        loadEdificios();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.EdificioController;&#10;import com.example.vivienda.controller.ColoniaController;&#10;import com.example.vivienda.controller.PersonaController;&#10;import com.example.vivienda.controller.DepartamentoController;&#10;import com.example.vivienda.model.Edificio;&#10;import com.example.vivienda.model.Colonia;&#10;import com.example.vivienda.model.Persona;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Alert;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.ComboBox;&#10;import javafx.scene.control.ListCell;&#10;import javafx.scene.control.TableColumn;&#10;import javafx.scene.control.TableView;&#10;import javafx.scene.control.TextField;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.beans.property.SimpleIntegerProperty;&#10;&#10;public class EdificioViewController {&#10;&#10;    private static EdificioViewController instance;&#10;&#10;    @FXML&#10;    private TextField nombreField;&#10;    @FXML&#10;    private TextField direccionField;&#10;    @FXML&#10;    private TextField superficieField;&#10;    @FXML&#10;    private TextField numeroExteriorField;&#10;    @FXML&#10;    private ComboBox&lt;Colonia&gt; comboColonia;&#10;    @FXML&#10;    private ComboBox&lt;Persona&gt; comboPropietario;&#10;    @FXML&#10;    private TableView&lt;Edificio&gt; edificioTable;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, Long&gt; idColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; nombreColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; direccionColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, Double&gt; superficieColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; numeroExteriorColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; coloniaColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, String&gt; propietarioColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, Integer&gt; numApartamentosColumn;&#10;    @FXML&#10;    private TableColumn&lt;Edificio, Integer&gt; numeroHabitantesColumn;&#10;&#10;    @FXML&#10;    private Button crearButton;&#10;    @FXML&#10;    private Button actualizarButton;&#10;    @FXML&#10;    private Button eliminarButton;&#10;    @FXML&#10;    private Button limpiarButton;&#10;    @FXML&#10;    private Button listarButton;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final EdificioController edificioController = new EdificioController();&#10;    private final ColoniaController coloniaController = new ColoniaController();&#10;    private final PersonaController personaController = new PersonaController();&#10;    private final DepartamentoController departamentoController = new DepartamentoController();&#10;    private ObservableList&lt;Edificio&gt; todosLosEdificios = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        instance = this;&#10;&#10;        idColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;id&quot;));&#10;        nombreColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;nombre&quot;));&#10;        direccionColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;direccion&quot;));&#10;        superficieColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;superficie&quot;));&#10;        numeroExteriorColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;numeroExterior&quot;));&#10;&#10;        // Columna de colonia&#10;        coloniaColumn.setCellValueFactory(data -&gt; {&#10;            Colonia colonia = data.getValue().getColonia();&#10;            return new SimpleStringProperty(colonia != null ? colonia.getNombre() : &quot;&quot;);&#10;        });&#10;&#10;        // Columna de propietario&#10;        propietarioColumn.setCellValueFactory(data -&gt; {&#10;            Persona propietario = data.getValue().getPropietario();&#10;            return new SimpleStringProperty(propietario != null ? propietario.toString() : &quot;&quot;);&#10;        });&#10;&#10;        //  Columna de número de apartamentos - calculado automáticamente&#10;        numApartamentosColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue();&#10;            long count = departamentoController.obtenerTodosLosDepartamentos().stream()&#10;                    .filter(depto -&gt; depto.getEdificio() != null &amp;&amp; depto.getEdificio().getId() == edificio.getId())&#10;                    .count();&#10;            return new SimpleIntegerProperty((int) count).asObject();&#10;        });&#10;&#10;        //  Columna de número de habitantes - suma de habitantes de todos los departamentos&#10;        numeroHabitantesColumn.setCellValueFactory(data -&gt; {&#10;            Edificio edificio = data.getValue();&#10;            int totalHabitantes = departamentoController.obtenerTodosLosDepartamentos().stream()&#10;                    .filter(depto -&gt; depto.getEdificio() != null &amp;&amp; depto.getEdificio().getId() == edificio.getId())&#10;                    .mapToInt(depto -&gt; depto.getHabitantes() != null ? depto.getHabitantes().size() : 0)&#10;                    .sum();&#10;            return new SimpleIntegerProperty(totalHabitantes).asObject();&#10;        });&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Nombre&quot;,&#10;            &quot;Dirección&quot;,&#10;            &quot;Superficie&quot;,&#10;            &quot;Número Exterior&quot;,&#10;            &quot;Colonia&quot;,&#10;            &quot;Propietario&quot;,&#10;            &quot;Nº Apartamentos&quot;,&#10;            &quot;Nº Habitantes&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Cargar datos&#10;        comboColonia.setItems(FXCollections.observableArrayList(coloniaController.obtenerTodasLasColonias()));&#10;        comboPropietario.setItems(FXCollections.observableArrayList(personaController.obtenerTodasLasPersonas()));&#10;&#10;        // Configurar CellFactory para el ComboBox de Colonia&#10;        comboColonia.setCellFactory(param -&gt; new ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboColonia.setButtonCell(new ListCell&lt;Colonia&gt;() {&#10;            @Override&#10;            protected void updateItem(Colonia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione colonia&quot;);&#10;                } else {&#10;                    setText(item.getNombre());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Configurar CellFactory para el ComboBox de Propietario&#10;        comboPropietario.setCellFactory(param -&gt; new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        comboPropietario.setButtonCell(new ListCell&lt;Persona&gt;() {&#10;            @Override&#10;            protected void updateItem(Persona item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione propietario&quot;);&#10;                } else {&#10;                    setText(item.toString());&#10;                }&#10;            }&#10;        });&#10;&#10;        // Inicializar botones&#10;        setButtonsState(true, false, false);&#10;&#10;        // Listener de selección de tabla&#10;        edificioTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                onTableSelection(newSelection);&#10;                setButtonsState(false, true, true);&#10;            } else {&#10;                limpiarCampos();&#10;            }&#10;        });&#10;&#10;        // Botón limpiar&#10;        limpiarButton.setOnAction(e -&gt; limpiarCampos());&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            edificioTable.setItems(todosLosEdificios);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Edificio&gt; edificiosFiltrados = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Edificio edificio : todosLosEdificios) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(edificio.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nombre&quot;:&#10;                    coincide = edificio.getNombre() != null &amp;&amp;&#10;                              edificio.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Dirección&quot;:&#10;                    coincide = edificio.getDireccion() != null &amp;&amp;&#10;                              edificio.getDireccion().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Superficie&quot;:&#10;                    coincide = String.valueOf(edificio.getSuperficie()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Número Exterior&quot;:&#10;                    coincide = edificio.getNumeroExterior() != null &amp;&amp;&#10;                              edificio.getNumeroExterior().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Colonia&quot;:&#10;                    Colonia c = edificio.getColonia();&#10;                    coincide = c != null &amp;&amp; c.getNombre() != null &amp;&amp;&#10;                              c.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Propietario&quot;:&#10;                    Persona p = edificio.getPropietario();&#10;                    if (p != null) {&#10;                        String nombreCompleto = p.getNombre() != null ? p.getNombre() : &quot;&quot;;&#10;                        if (p.getFamilia() != null &amp;&amp; p.getFamilia().getApellidos() != null) {&#10;                            nombreCompleto += &quot; &quot; + p.getFamilia().getApellidos();&#10;                        }&#10;                        coincide = nombreCompleto.toLowerCase().contains(textoMinusculas);&#10;                    }&#10;                    break;&#10;                case &quot;Nº Apartamentos&quot;:&#10;                    long count = departamentoController.obtenerTodosLosDepartamentos().stream()&#10;                            .filter(depto -&gt; depto.getEdificio() != null &amp;&amp; depto.getEdificio().getId() == edificio.getId())&#10;                            .count();&#10;                    coincide = String.valueOf(count).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nº Habitantes&quot;:&#10;                    int totalHabitantes = departamentoController.obtenerTodosLosDepartamentos().stream()&#10;                            .filter(depto -&gt; depto.getEdificio() != null &amp;&amp; depto.getEdificio().getId() == edificio.getId())&#10;                            .mapToInt(depto -&gt; depto.getHabitantes() != null ? depto.getHabitantes().size() : 0)&#10;                            .sum();&#10;                    coincide = String.valueOf(totalHabitantes).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                edificiosFiltrados.add(edificio);&#10;            }&#10;        }&#10;&#10;        edificioTable.setItems(edificiosFiltrados);&#10;    }&#10;&#10;    private void loadEdificios() {&#10;        todosLosEdificios.setAll(edificioController.obtenerTodosLosEdificios());&#10;        edificioTable.setItems(todosLosEdificios);&#10;        edificioTable.refresh();&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreate() {&#10;        if (!validarCampos()) return;&#10;&#10;        // Validar número exterior duplicado en la misma dirección&#10;        String direccionIngresada = direccionField.getText().trim();&#10;        String numeroExteriorIngresado = numeroExteriorField.getText().trim();&#10;&#10;        boolean numeroDuplicado = edificioController.obtenerTodosLosEdificios().stream()&#10;                .anyMatch(e -&gt; e.getDireccion() != null &amp;&amp; e.getDireccion().trim().equalsIgnoreCase(direccionIngresada) &amp;&amp;&#10;                              e.getNumeroExterior() != null &amp;&amp; e.getNumeroExterior().equals(numeroExteriorIngresado));&#10;&#10;        if (numeroDuplicado) {&#10;            mostrarAlerta(&quot;Error al crear edificio&quot;, &quot;Número Exterior duplicado&quot;,&#10;                    &quot;Ya existe una vivienda con el número exterior &quot; + numeroExteriorIngresado + &quot; en la dirección &quot; + direccionIngresada + &quot;.&quot;);&#10;            return;&#10;        }&#10;&#10;        Edificio edificio = new Edificio();&#10;        edificio.setNombre(nombreField.getText());&#10;        edificio.setDireccion(direccionField.getText());&#10;        edificio.setSuperficie(Double.parseDouble(superficieField.getText()));&#10;        edificio.setNumeroExterior(numeroExteriorField.getText());&#10;        edificio.setColonia(comboColonia.getValue());&#10;        edificio.setPropietario(comboPropietario.getValue());&#10;&#10;        // Mantener consistencia bidireccional&#10;        if (edificio.getPropietario() != null) {&#10;            edificio.getPropietario().setVivienda(edificio);&#10;        }&#10;&#10;        edificioController.crearEdificio(edificio);&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void handleUpdate() {&#10;        Edificio selectedEdificio = edificioTable.getSelectionModel().getSelectedItem();&#10;        if (selectedEdificio == null) return;&#10;        if (!validarCampos()) return;&#10;&#10;        String direccionIngresada = direccionField.getText().trim();&#10;        String numeroExteriorIngresado = numeroExteriorField.getText().trim();&#10;        String direccionOriginal = selectedEdificio.getDireccion() != null ? selectedEdificio.getDireccion().trim() : &quot;&quot;;&#10;        String numeroExteriorOriginal = selectedEdificio.getNumeroExterior() != null ? selectedEdificio.getNumeroExterior() : &quot;&quot;;&#10;&#10;        if (!direccionOriginal.equalsIgnoreCase(direccionIngresada) || !numeroExteriorOriginal.equals(numeroExteriorIngresado)) {&#10;            boolean numeroDuplicado = edificioController.obtenerTodosLosEdificios().stream()&#10;                    .anyMatch(e -&gt; e.getDireccion() != null &amp;&amp; e.getDireccion().trim().equalsIgnoreCase(direccionIngresada) &amp;&amp;&#10;                                   e.getNumeroExterior() != null &amp;&amp; e.getNumeroExterior().equals(numeroExteriorIngresado) &amp;&amp;&#10;                                   e.getId() != selectedEdificio.getId());&#10;            if (numeroDuplicado) {&#10;                mostrarAlerta(&quot;Error al actualizar edificio&quot;, &quot;Número Exterior duplicado&quot;,&#10;                        &quot;Ya existe una vivienda con el número exterior &quot; + numeroExteriorIngresado + &quot; en la dirección &quot; + direccionIngresada + &quot;.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        selectedEdificio.setNombre(nombreField.getText());&#10;        selectedEdificio.setDireccion(direccionField.getText());&#10;        selectedEdificio.setSuperficie(Double.parseDouble(superficieField.getText()));&#10;        selectedEdificio.setNumeroExterior(numeroExteriorField.getText());&#10;        selectedEdificio.setColonia(comboColonia.getValue());&#10;        selectedEdificio.setPropietario(comboPropietario.getValue());&#10;&#10;        // Mantener consistencia bidireccional&#10;        if (selectedEdificio.getPropietario() != null) {&#10;            selectedEdificio.getPropietario().setVivienda(selectedEdificio);&#10;        }&#10;&#10;        edificioController.actualizarEdificio(selectedEdificio);&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void handleDelete() {&#10;        Edificio selectedEdificio = edificioTable.getSelectionModel().getSelectedItem();&#10;        if (selectedEdificio == null) return;&#10;&#10;        edificioController.eliminarEdificioPorId(selectedEdificio.getId());&#10;        postAction();&#10;    }&#10;&#10;    @FXML&#10;    private void handleListar() {&#10;        loadEdificios();&#10;    }&#10;&#10;    private void postAction() {&#10;        limpiarCampos();&#10;        loadEdificios();&#10;        edificioTable.getSelectionModel().clearSelection();&#10;&#10;        //  Refrescar la tabla de colonias para actualizar el número de viviendas&#10;        if (ColoniaViewController.getInstance() != null) {&#10;            ColoniaViewController.getInstance().refreshTable();&#10;        }&#10;    }&#10;&#10;    private void onTableSelection(Edificio selectedEdificio) {&#10;        nombreField.setText(selectedEdificio.getNombre());&#10;        direccionField.setText(selectedEdificio.getDireccion());&#10;        superficieField.setText(String.valueOf(selectedEdificio.getSuperficie()));&#10;        numeroExteriorField.setText(selectedEdificio.getNumeroExterior());&#10;        comboColonia.setValue(selectedEdificio.getColonia());&#10;        comboPropietario.setValue(selectedEdificio.getPropietario());&#10;    }&#10;&#10;    // Limpiar campos y restablecer botones (misma dinámica que Persona)&#10;    private void limpiarCampos() {&#10;        nombreField.clear();&#10;        direccionField.clear();&#10;        superficieField.clear();&#10;        numeroExteriorField.clear();&#10;        comboColonia.setValue(null);&#10;        comboPropietario.setValue(null);&#10;        setButtonsState(true, false, false);&#10;    }&#10;&#10;    private void setButtonsState(boolean crear, boolean actualizar, boolean eliminar) {&#10;        crearButton.setDisable(!crear);&#10;        actualizarButton.setDisable(!actualizar);&#10;        eliminarButton.setDisable(!eliminar);&#10;    }&#10;&#10;    private boolean validarCampos() {&#10;        if (nombreField.getText().isEmpty() || direccionField.getText().isEmpty() || superficieField.getText().isEmpty() ||&#10;                numeroExteriorField.getText().isEmpty()) {&#10;            mostrarAlerta(&quot;Campos incompletos&quot;, &quot;Error de validación&quot;, &quot;Por favor complete todos los campos obligatorios.&quot;);&#10;            return false;&#10;        }&#10;        try {&#10;            Double.parseDouble(superficieField.getText());&#10;        } catch (NumberFormatException e) {&#10;            mostrarAlerta(&quot;Error de formato&quot;, &quot;Campos numéricos inválidos&quot;, &quot;La superficie debe ser un valor numérico.&quot;);&#10;            return false;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void mostrarAlerta(String titulo, String header, String contenido) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(header);&#10;        alert.setContentText(contenido);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    public static EdificioViewController getInstance() {&#10;        return instance;&#10;    }&#10;&#10;    public void refreshTable() {&#10;        loadEdificios();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/FamiliaViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/FamiliaViewController.java" />
              <option name="originalContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.FamiliaController;&#10;import com.example.vivienda.model.Familia;&#10;import javafx.beans.property.SimpleIntegerProperty;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;&#10;import java.util.List;&#10;&#10;public class FamiliaViewController {&#10;&#10;    @FXML&#10;    private TextField apellidosField;&#10;    @FXML&#10;    private TableView&lt;Familia&gt; familiaTable;&#10;    @FXML&#10;    private TableColumn&lt;Familia, Long&gt; idColumn;&#10;    @FXML&#10;    private TableColumn&lt;Familia, String&gt; apellidosColumn;&#10;    @FXML&#10;    private TableColumn&lt;Familia, Integer&gt; numMiembrosColumn;&#10;&#10;    @FXML&#10;    private Button crearButton;&#10;    @FXML&#10;    private Button actualizarButton;&#10;    @FXML&#10;    private Button eliminarButton;&#10;    @FXML&#10;    private Button limpiarButton;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final FamiliaController familiaController = new FamiliaController();&#10;    private ObservableList&lt;Familia&gt; todasLasFamilias = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        idColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;id&quot;));&#10;        apellidosColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;apellidos&quot;));&#10;        numMiembrosColumn.setCellValueFactory(cellData -&gt;&#10;                new SimpleIntegerProperty(familiaController.obtenerNumeroMiembros(cellData.getValue())).asObject()&#10;        );&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Apellidos&quot;,&#10;            &quot;Nº Miembros&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        loadFamilias();&#10;&#10;        // Estado inicial de botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;&#10;        // Listener para selección de tabla&#10;        familiaTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                onTableSelection(newSelection);&#10;                crearButton.setDisable(true);&#10;                actualizarButton.setDisable(false);&#10;                eliminarButton.setDisable(false);&#10;            } else {&#10;                crearButton.setDisable(false);&#10;                actualizarButton.setDisable(true);&#10;                eliminarButton.setDisable(true);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            familiaTable.setItems(todasLasFamilias);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Familia&gt; familiasFiltradas = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Familia familia : todasLasFamilias) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(familia.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Apellidos&quot;:&#10;                    coincide = familia.getApellidos() != null &amp;&amp;&#10;                              familia.getApellidos().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nº Miembros&quot;:&#10;                    int numMiembros = familiaController.obtenerNumeroMiembros(familia);&#10;                    coincide = String.valueOf(numMiembros).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                familiasFiltradas.add(familia);&#10;            }&#10;        }&#10;&#10;        familiaTable.setItems(familiasFiltradas);&#10;    }&#10;&#10;    private void loadFamilias() {&#10;        List&lt;Familia&gt; familias = familiaController.obtenerTodasLasFamilias();&#10;        todasLasFamilias.setAll(familias);&#10;        familiaTable.setItems(todasLasFamilias);&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreate() {&#10;        if (!validateInput()) return;&#10;&#10;        // Verificar si ya existe una familia con los mismos apellidos&#10;        Familia familiaExistente = familiaController.buscarPorApellidos(apellidosField.getText());&#10;        if (familiaExistente != null) {&#10;            Alert alert = new Alert(Alert.AlertType.ERROR);&#10;            alert.setTitle(&quot;Error&quot;);&#10;            alert.setHeaderText(&quot;Familia ya existe&quot;);&#10;            alert.setContentText(&quot;Ya existe una familia con los apellidos '&quot; + apellidosField.getText() + &quot;'&quot;);&#10;            alert.showAndWait();&#10;            return;&#10;        }&#10;&#10;        Familia familia = new Familia(apellidosField.getText());&#10;        familiaController.crearFamilia(familia);&#10;        loadFamilias();&#10;        clearFields();&#10;&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;        familiaTable.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    @FXML&#10;    private void handleUpdate() {&#10;        if (!validateInput()) return;&#10;&#10;        Familia selectedFamilia = familiaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedFamilia != null) {&#10;            // Verificar si ya existe otra familia con los mismos apellidos&#10;            Familia familiaExistente = familiaController.buscarPorApellidos(apellidosField.getText());&#10;            if (familiaExistente != null &amp;&amp; familiaExistente.getId() != selectedFamilia.getId()) {&#10;                Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                alert.setTitle(&quot;Error&quot;);&#10;                alert.setHeaderText(&quot;Apellidos duplicados&quot;);&#10;                alert.setContentText(&quot;Ya existe otra familia con los apellidos '&quot; + apellidosField.getText() + &quot;'&quot;);&#10;                alert.showAndWait();&#10;                return;&#10;            }&#10;&#10;            selectedFamilia.setApellidos(apellidosField.getText());&#10;            familiaController.actualizarFamilia(selectedFamilia);&#10;            loadFamilias();&#10;            clearFields();&#10;&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            familiaTable.getSelectionModel().clearSelection();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleDelete() {&#10;        Familia selectedFamilia = familiaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedFamilia != null) {&#10;            // Verificar si la familia tiene miembros&#10;            int numMiembros = familiaController.obtenerNumeroMiembros(selectedFamilia);&#10;            if (numMiembros &gt; 0) {&#10;                Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                alert.setTitle(&quot;Error&quot;);&#10;                alert.setHeaderText(&quot;No se puede eliminar la familia&quot;);&#10;                alert.setContentText(&quot;La familia tiene &quot; + numMiembros + &quot; miembro(s). Elimine primero a todos los miembros.&quot;);&#10;                alert.showAndWait();&#10;                return;&#10;            }&#10;&#10;            // Confirmación antes de eliminar&#10;            Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);&#10;            confirmAlert.setTitle(&quot;Confirmar eliminación&quot;);&#10;            confirmAlert.setHeaderText(&quot;¿Está seguro de eliminar esta familia?&quot;);&#10;            confirmAlert.setContentText(&quot;Familia: &quot; + selectedFamilia.getApellidos());&#10;&#10;            if (confirmAlert.showAndWait().get() == ButtonType.OK) {&#10;                familiaController.eliminarFamiliaPorId(selectedFamilia.getId());&#10;                loadFamilias();&#10;                clearFields();&#10;&#10;                crearButton.setDisable(false);&#10;                actualizarButton.setDisable(true);&#10;                eliminarButton.setDisable(true);&#10;                familiaTable.getSelectionModel().clearSelection();&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleLimpiar() {&#10;        clearFields();&#10;        familiaTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;    }&#10;&#10;    private void onTableSelection(Familia selectedFamilia) {&#10;        apellidosField.setText(selectedFamilia.getApellidos());&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        String errorMessage = &quot;&quot;;&#10;&#10;        if (apellidosField.getText() == null || apellidosField.getText().trim().isEmpty()) {&#10;            errorMessage += &quot;Apellidos no válidos.\n&quot;;&#10;        }&#10;&#10;        if (errorMessage.isEmpty()) {&#10;            return true;&#10;        } else {&#10;            Alert alert = new Alert(Alert.AlertType.ERROR);&#10;            alert.setTitle(&quot;Campos no válidos&quot;);&#10;            alert.setHeaderText(&quot;Por favor, corrija los campos no válidos&quot;);&#10;            alert.setContentText(errorMessage);&#10;            alert.showAndWait();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private void clearFields() {&#10;        apellidosField.clear();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.FamiliaController;&#10;import com.example.vivienda.model.Familia;&#10;import javafx.beans.property.SimpleIntegerProperty;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;&#10;import java.util.List;&#10;&#10;public class FamiliaViewController {&#10;&#10;    @FXML&#10;    private TextField apellidosField;&#10;    @FXML&#10;    private TableView&lt;Familia&gt; familiaTable;&#10;    @FXML&#10;    private TableColumn&lt;Familia, Long&gt; idColumn;&#10;    @FXML&#10;    private TableColumn&lt;Familia, String&gt; apellidosColumn;&#10;    @FXML&#10;    private TableColumn&lt;Familia, Integer&gt; numMiembrosColumn;&#10;&#10;    @FXML&#10;    private Button crearButton;&#10;    @FXML&#10;    private Button actualizarButton;&#10;    @FXML&#10;    private Button eliminarButton;&#10;    @FXML&#10;    private Button limpiarButton;&#10;    @FXML&#10;    private Button listarButton;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final FamiliaController familiaController = new FamiliaController();&#10;    private ObservableList&lt;Familia&gt; todasLasFamilias = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        idColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;id&quot;));&#10;        apellidosColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;apellidos&quot;));&#10;        numMiembrosColumn.setCellValueFactory(cellData -&gt;&#10;                new SimpleIntegerProperty(familiaController.obtenerNumeroMiembros(cellData.getValue())).asObject()&#10;        );&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Apellidos&quot;,&#10;            &quot;Nº Miembros&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Estado inicial de botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;&#10;        // Listener para selección de tabla&#10;        familiaTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                onTableSelection(newSelection);&#10;                crearButton.setDisable(true);&#10;                actualizarButton.setDisable(false);&#10;                eliminarButton.setDisable(false);&#10;            } else {&#10;                crearButton.setDisable(false);&#10;                actualizarButton.setDisable(true);&#10;                eliminarButton.setDisable(true);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            familiaTable.setItems(todasLasFamilias);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Familia&gt; familiasFiltradas = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Familia familia : todasLasFamilias) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(familia.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Apellidos&quot;:&#10;                    coincide = familia.getApellidos() != null &amp;&amp;&#10;                              familia.getApellidos().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nº Miembros&quot;:&#10;                    int numMiembros = familiaController.obtenerNumeroMiembros(familia);&#10;                    coincide = String.valueOf(numMiembros).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                familiasFiltradas.add(familia);&#10;            }&#10;        }&#10;&#10;        familiaTable.setItems(familiasFiltradas);&#10;    }&#10;&#10;    private void loadFamilias() {&#10;        List&lt;Familia&gt; familias = familiaController.obtenerTodasLasFamilias();&#10;        todasLasFamilias.setAll(familias);&#10;        familiaTable.setItems(todasLasFamilias);&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreate() {&#10;        if (!validateInput()) return;&#10;&#10;        // Verificar si ya existe una familia con los mismos apellidos&#10;        Familia familiaExistente = familiaController.buscarPorApellidos(apellidosField.getText());&#10;        if (familiaExistente != null) {&#10;            Alert alert = new Alert(Alert.AlertType.ERROR);&#10;            alert.setTitle(&quot;Error&quot;);&#10;            alert.setHeaderText(&quot;Familia ya existe&quot;);&#10;            alert.setContentText(&quot;Ya existe una familia con los apellidos '&quot; + apellidosField.getText() + &quot;'&quot;);&#10;            alert.showAndWait();&#10;            return;&#10;        }&#10;&#10;        Familia familia = new Familia(apellidosField.getText());&#10;        familiaController.crearFamilia(familia);&#10;        loadFamilias();&#10;        clearFields();&#10;&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;        familiaTable.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    @FXML&#10;    private void handleUpdate() {&#10;        if (!validateInput()) return;&#10;&#10;        Familia selectedFamilia = familiaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedFamilia != null) {&#10;            // Verificar si ya existe otra familia con los mismos apellidos&#10;            Familia familiaExistente = familiaController.buscarPorApellidos(apellidosField.getText());&#10;            if (familiaExistente != null &amp;&amp; familiaExistente.getId() != selectedFamilia.getId()) {&#10;                Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                alert.setTitle(&quot;Error&quot;);&#10;                alert.setHeaderText(&quot;Apellidos duplicados&quot;);&#10;                alert.setContentText(&quot;Ya existe otra familia con los apellidos '&quot; + apellidosField.getText() + &quot;'&quot;);&#10;                alert.showAndWait();&#10;                return;&#10;            }&#10;&#10;            selectedFamilia.setApellidos(apellidosField.getText());&#10;            familiaController.actualizarFamilia(selectedFamilia);&#10;            loadFamilias();&#10;            clearFields();&#10;&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            familiaTable.getSelectionModel().clearSelection();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleDelete() {&#10;        Familia selectedFamilia = familiaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedFamilia != null) {&#10;            // Verificar si la familia tiene miembros&#10;            int numMiembros = familiaController.obtenerNumeroMiembros(selectedFamilia);&#10;            if (numMiembros &gt; 0) {&#10;                Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                alert.setTitle(&quot;Error&quot;);&#10;                alert.setHeaderText(&quot;No se puede eliminar la familia&quot;);&#10;                alert.setContentText(&quot;La familia tiene &quot; + numMiembros + &quot; miembro(s). Elimine primero a todos los miembros.&quot;);&#10;                alert.showAndWait();&#10;                return;&#10;            }&#10;&#10;            // Confirmación antes de eliminar&#10;            Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);&#10;            confirmAlert.setTitle(&quot;Confirmar eliminación&quot;);&#10;            confirmAlert.setHeaderText(&quot;¿Está seguro de eliminar esta familia?&quot;);&#10;            confirmAlert.setContentText(&quot;Familia: &quot; + selectedFamilia.getApellidos());&#10;&#10;            if (confirmAlert.showAndWait().get() == ButtonType.OK) {&#10;                familiaController.eliminarFamiliaPorId(selectedFamilia.getId());&#10;                loadFamilias();&#10;                clearFields();&#10;&#10;                crearButton.setDisable(false);&#10;                actualizarButton.setDisable(true);&#10;                eliminarButton.setDisable(true);&#10;                familiaTable.getSelectionModel().clearSelection();&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleLimpiar() {&#10;        clearFields();&#10;        familiaTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;    }&#10;&#10;    @FXML&#10;    private void handleListar() {&#10;        loadFamilias();&#10;    }&#10;&#10;    private void onTableSelection(Familia selectedFamilia) {&#10;        apellidosField.setText(selectedFamilia.getApellidos());&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        String errorMessage = &quot;&quot;;&#10;&#10;        if (apellidosField.getText() == null || apellidosField.getText().trim().isEmpty()) {&#10;            errorMessage += &quot;Apellidos no válidos.\n&quot;;&#10;        }&#10;&#10;        if (errorMessage.isEmpty()) {&#10;            return true;&#10;        } else {&#10;            Alert alert = new Alert(Alert.AlertType.ERROR);&#10;            alert.setTitle(&quot;Campos no válidos&quot;);&#10;            alert.setHeaderText(&quot;Por favor, corrija los campos no válidos&quot;);&#10;            alert.setContentText(errorMessage);&#10;            alert.showAndWait();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private void clearFields() {&#10;        apellidosField.clear();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/PersonaViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/vivienda/view/PersonaViewController.java" />
              <option name="originalContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.CasaUnifamiliarController;&#10;import com.example.vivienda.controller.DepartamentoController;&#10;import com.example.vivienda.controller.FamiliaController;&#10;import com.example.vivienda.controller.PersonaController;&#10;import com.example.vivienda.model.CasaUnifamiliar;&#10;import com.example.vivienda.model.Departamento;&#10;import com.example.vivienda.model.Familia;&#10;import com.example.vivienda.model.Persona;&#10;import com.example.vivienda.model.Vivienda;&#10;import javafx.beans.property.SimpleIntegerProperty;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.util.StringConverter;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class PersonaViewController {&#10;&#10;    @FXML&#10;    private TextField nombreField;&#10;    @FXML&#10;    private ComboBox&lt;Familia&gt; familiaComboBox;&#10;    @FXML&#10;    private TextField rfcField;&#10;    @FXML&#10;    private TextField edadField;&#10;    @FXML&#10;    private CheckBox esJefeDeFamiliaCheckBox;&#10;    @FXML&#10;    private ComboBox&lt;Vivienda&gt; viviendaComboBox;&#10;    @FXML&#10;    private TableView&lt;Persona&gt; personaTable;&#10;    @FXML&#10;    private TableColumn&lt;Persona, Long&gt; idColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; nombreColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; apellidosColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; rfcColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, Integer&gt; edadColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; esJefeDeFamiliaColumn;  //  Cambiar de Boolean a String&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; viviendaColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, Integer&gt; numPropiedadesColumn;&#10;&#10;    //  Botones con fx:id&#10;    @FXML&#10;    private Button crearButton;&#10;    @FXML&#10;    private Button actualizarButton;&#10;    @FXML&#10;    private Button eliminarButton;&#10;    @FXML&#10;    private Button limpiarButton;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final PersonaController personaController = new PersonaController();&#10;    private final FamiliaController familiaController = new FamiliaController();&#10;    private final CasaUnifamiliarController casaUnifamiliarController = new CasaUnifamiliarController();&#10;    private final DepartamentoController departamentoController = new DepartamentoController();&#10;    private ObservableList&lt;Persona&gt; todasLasPersonas = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        idColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;id&quot;));&#10;        nombreColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;nombre&quot;));&#10;        apellidosColumn.setCellValueFactory(cellData -&gt; {&#10;            Familia f = cellData.getValue().getFamilia();&#10;            return new SimpleStringProperty(f != null ? f.getApellidos() : &quot;&quot;);&#10;        });&#10;        rfcColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;rfc&quot;));&#10;        edadColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;edad&quot;));&#10;&#10;        //  Mostrar &quot;Sí&quot; o &quot;No&quot; en lugar de true/false&#10;        esJefeDeFamiliaColumn.setCellValueFactory(cellData -&gt; {&#10;            boolean esJefe = cellData.getValue().isEsJefeDeFamilia();&#10;            return new SimpleStringProperty(esJefe ? &quot;Sí&quot; : &quot;No&quot;);&#10;        });&#10;&#10;        viviendaColumn.setCellValueFactory(cellData -&gt; {&#10;            Vivienda v = cellData.getValue().getVivienda();&#10;            if (v == null) {&#10;                return new SimpleStringProperty(&quot;Sin vivienda&quot;);&#10;            }&#10;            if (v instanceof CasaUnifamiliar) {&#10;                CasaUnifamiliar casa = (CasaUnifamiliar) v;&#10;                return new SimpleStringProperty(&quot;Casa: &quot; + casa.getDireccion());&#10;            } else if (v instanceof Departamento) {&#10;                Departamento depto = (Departamento) v;&#10;                String edificioInfo = &quot;&quot;;&#10;                if (depto.getEdificio() != null) {&#10;                    edificioInfo = &quot; - Edif: &quot; + depto.getEdificio().getNombre();&#10;                }&#10;                return new SimpleStringProperty(&quot;Depto #&quot; + depto.getNumero() + edificioInfo);&#10;            }&#10;            return new SimpleStringProperty(v.getDireccion());&#10;        });&#10;        numPropiedadesColumn.setCellValueFactory(cellData -&gt;&#10;                new SimpleIntegerProperty(personaController.obtenerNumeroDePropiedades(cellData.getValue())).asObject()&#10;        );&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Nombre&quot;,&#10;            &quot;Apellidos&quot;,&#10;            &quot;RFC&quot;,&#10;            &quot;Edad&quot;,&#10;            &quot;Jefe de Familia&quot;,&#10;            &quot;Vivienda&quot;,&#10;            &quot;N. Prop.&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Configurar ComboBox de familias&#10;        configurarFamiliaComboBox();&#10;        configurarViviendaComboBox();&#10;        loadFamilias();&#10;        loadViviendas();&#10;        loadPersonas();&#10;&#10;        //  Estado inicial de botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;&#10;        //  Cuando se selecciona una fila&#10;        personaTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                onTableSelection(newSelection);&#10;                crearButton.setDisable(true);&#10;                actualizarButton.setDisable(false);&#10;                eliminarButton.setDisable(false);&#10;            } else {&#10;                crearButton.setDisable(false);&#10;                actualizarButton.setDisable(true);&#10;                eliminarButton.setDisable(true);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            personaTable.setItems(todasLasPersonas);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Persona&gt; personasFiltradas = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Persona persona : todasLasPersonas) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(persona.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nombre&quot;:&#10;                    coincide = persona.getNombre() != null &amp;&amp;&#10;                              persona.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Apellidos&quot;:&#10;                    Familia f = persona.getFamilia();&#10;                    coincide = f != null &amp;&amp; f.getApellidos() != null &amp;&amp;&#10;                              f.getApellidos().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;RFC&quot;:&#10;                    coincide = persona.getRfc() != null &amp;&amp;&#10;                              persona.getRfc().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Edad&quot;:&#10;                    coincide = String.valueOf(persona.getEdad()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Jefe de Familia&quot;:&#10;                    String esJefe = persona.isEsJefeDeFamilia() ? &quot;si&quot; : &quot;no&quot;;&#10;                    coincide = esJefe.contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Vivienda&quot;:&#10;                    Vivienda v = persona.getVivienda();&#10;                    if (v != null) {&#10;                        if (v instanceof CasaUnifamiliar) {&#10;                            CasaUnifamiliar casa = (CasaUnifamiliar) v;&#10;                            coincide = casa.getDireccion() != null &amp;&amp;&#10;                                      casa.getDireccion().toLowerCase().contains(textoMinusculas);&#10;                        } else if (v instanceof Departamento) {&#10;                            Departamento depto = (Departamento) v;&#10;                            coincide = (depto.getNumero() != null &amp;&amp;&#10;                                      depto.getNumero().toLowerCase().contains(textoMinusculas)) ||&#10;                                      (depto.getEdificio() != null &amp;&amp; depto.getEdificio().getNombre() != null &amp;&amp;&#10;                                      depto.getEdificio().getNombre().toLowerCase().contains(textoMinusculas));&#10;                        }&#10;                    }&#10;                    break;&#10;                case &quot;N. Prop.&quot;:&#10;                    int numProp = personaController.obtenerNumeroDePropiedades(persona);&#10;                    coincide = String.valueOf(numProp).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                personasFiltradas.add(persona);&#10;            }&#10;        }&#10;&#10;        personaTable.setItems(personasFiltradas);&#10;    }&#10;&#10;    private void configurarFamiliaComboBox() {&#10;        familiaComboBox.setConverter(new StringConverter&lt;Familia&gt;() {&#10;            @Override&#10;            public String toString(Familia familia) {&#10;                if (familia == null) {&#10;                    return null;&#10;                }&#10;                return familia.getApellidos() + &quot; (ID: &quot; + familia.getId() + &quot;)&quot;;&#10;            }&#10;&#10;            @Override&#10;            public Familia fromString(String string) {&#10;                return null;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void configurarViviendaComboBox() {&#10;        viviendaComboBox.setConverter(new StringConverter&lt;Vivienda&gt;() {&#10;            @Override&#10;            public String toString(Vivienda vivienda) {&#10;                if (vivienda == null) {&#10;                    return null;&#10;                }&#10;                if (vivienda instanceof CasaUnifamiliar) {&#10;                    CasaUnifamiliar casa = (CasaUnifamiliar) vivienda;&#10;                    return &quot;Casa: &quot; + casa.getDireccion() + &quot; (Clave: &quot; + casa.getNumeroExterior() + &quot;)&quot;;&#10;                } else if (vivienda instanceof Departamento) {&#10;                    Departamento depto = (Departamento) vivienda;&#10;                    String edificioInfo = &quot;&quot;;&#10;                    if (depto.getEdificio() != null) {&#10;                        edificioInfo = &quot; - Edificio: &quot; + depto.getEdificio().getNombre();&#10;                    }&#10;                    return &quot;Depto #&quot; + depto.getNumero() + &quot;: &quot; + depto.getDireccion() + edificioInfo + &quot; (Clave: &quot; + depto.getNumeroExterior() + &quot;)&quot;;&#10;                }&#10;                return vivienda.getDireccion();&#10;            }&#10;&#10;            @Override&#10;            public Vivienda fromString(String string) {&#10;                return null;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadViviendas() {&#10;        List&lt;Vivienda&gt; viviendas = new ArrayList&lt;&gt;();&#10;&#10;        // Cargar todas las casas unifamiliares&#10;        List&lt;CasaUnifamiliar&gt; casas = casaUnifamiliarController.obtenerTodasLasCasas();&#10;        if (casas != null) {&#10;            viviendas.addAll(casas);&#10;        }&#10;&#10;        // Cargar todos los departamentos&#10;        List&lt;Departamento&gt; departamentos = departamentoController.obtenerTodosLosDepartamentos();&#10;        if (departamentos != null) {&#10;            viviendas.addAll(departamentos);&#10;        }&#10;&#10;        viviendaComboBox.getItems().setAll(viviendas);&#10;    }&#10;&#10;    private void loadFamilias() {&#10;        List&lt;Familia&gt; familias = familiaController.obtenerTodasLasFamilias();&#10;        familiaComboBox.getItems().setAll(familias);&#10;    }&#10;&#10;    private void loadPersonas() {&#10;        List&lt;Persona&gt; personas = personaController.obtenerTodasLasPersonas();&#10;        todasLasPersonas.setAll(personas);&#10;        personaTable.setItems(todasLasPersonas);&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreate() {&#10;        if (!validateInput()) return;&#10;&#10;        Familia familiaSeleccionada = familiaComboBox.getValue();&#10;&#10;        // Validar que solo haya un jefe de familia por apellidos&#10;        if (esJefeDeFamiliaCheckBox.isSelected()) {&#10;            Persona jefeFamiliaExistente = personaController.obtenerJefeDeFamiliaPorApellidos(familiaSeleccionada.getApellidos());&#10;            if (jefeFamiliaExistente != null) {&#10;                Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                alert.setTitle(&quot;Error&quot;);&#10;                alert.setHeaderText(&quot;Ya existe un jefe de familia&quot;);&#10;                alert.setContentText(&quot;La familia con apellidos '&quot; + familiaSeleccionada.getApellidos() +&#10;                                   &quot;' ya tiene un jefe de familia: &quot; + jefeFamiliaExistente.getNombre());&#10;                alert.showAndWait();&#10;                return;&#10;            }&#10;        }&#10;&#10;        Persona persona = new Persona(&#10;                nombreField.getText(),&#10;                rfcField.getText(),&#10;                esJefeDeFamiliaCheckBox.isSelected(),&#10;                Integer.parseInt(edadField.getText()),&#10;                familiaSeleccionada&#10;        );&#10;&#10;        // Asignar la vivienda seleccionada&#10;        Vivienda viviendaSeleccionada = viviendaComboBox.getValue();&#10;        if (viviendaSeleccionada != null) {&#10;            persona.setVivienda(viviendaSeleccionada);&#10;        }&#10;&#10;        personaController.crearPersona(persona);&#10;        loadPersonas();&#10;        clearFields();&#10;&#10;        //  Restaurar botones y limpiar selección&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;        personaTable.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    @FXML&#10;    private void handleUpdate() {&#10;        if (!validateInput()) return;&#10;&#10;        Persona selectedPersona = personaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedPersona != null) {&#10;            Familia familiaSeleccionada = familiaComboBox.getValue();&#10;&#10;            // Validar que solo haya un jefe de familia por apellidos&#10;            if (esJefeDeFamiliaCheckBox.isSelected()) {&#10;                Persona jefeFamiliaExistente = personaController.obtenerJefeDeFamiliaPorApellidos(familiaSeleccionada.getApellidos());&#10;                // Si existe otro jefe de familia y NO es la persona actual que estamos editando&#10;                if (jefeFamiliaExistente != null &amp;&amp; jefeFamiliaExistente.getId() != selectedPersona.getId()) {&#10;                    Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                    alert.setTitle(&quot;Error&quot;);&#10;                    alert.setHeaderText(&quot;Ya existe un jefe de familia&quot;);&#10;                    alert.setContentText(&quot;La familia con apellidos '&quot; + familiaSeleccionada.getApellidos() +&#10;                                       &quot;' ya tiene un jefe de familia: &quot; + jefeFamiliaExistente.getNombre());&#10;                    alert.showAndWait();&#10;                    return;&#10;                }&#10;            }&#10;&#10;            selectedPersona.setNombre(nombreField.getText());&#10;            selectedPersona.setRfc(rfcField.getText());&#10;            selectedPersona.setEdad(Integer.parseInt(edadField.getText()));&#10;            selectedPersona.setEsJefeDeFamilia(esJefeDeFamiliaCheckBox.isSelected());&#10;            selectedPersona.setFamilia(familiaSeleccionada);&#10;&#10;            // Asignar la vivienda seleccionada&#10;            Vivienda viviendaSeleccionada = viviendaComboBox.getValue();&#10;            selectedPersona.setVivienda(viviendaSeleccionada);&#10;&#10;            personaController.actualizarPersona(selectedPersona);&#10;            loadPersonas();&#10;            clearFields();&#10;&#10;            //  Restaurar botones y limpiar selección&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            personaTable.getSelectionModel().clearSelection();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleDelete() {&#10;        Persona selectedPersona = personaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedPersona != null) {&#10;            personaController.eliminarPersonaPorId(selectedPersona.getId());&#10;            loadPersonas();&#10;            clearFields();&#10;&#10;            //  Restaurar botones y limpiar selección&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            personaTable.getSelectionModel().clearSelection();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleLimpiar() {&#10;        clearFields();&#10;        personaTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        // Restaurar botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;    }&#10;&#10;    private void onTableSelection(Persona selectedPersona) {&#10;        nombreField.setText(selectedPersona.getNombre());&#10;        rfcField.setText(selectedPersona.getRfc());&#10;        edadField.setText(String.valueOf(selectedPersona.getEdad()));&#10;        esJefeDeFamiliaCheckBox.setSelected(selectedPersona.isEsJefeDeFamilia());&#10;&#10;        if (selectedPersona.getFamilia() != null) {&#10;            familiaComboBox.setValue(selectedPersona.getFamilia());&#10;        } else {&#10;            familiaComboBox.setValue(null);&#10;        }&#10;&#10;        if (selectedPersona.getVivienda() != null) {&#10;            viviendaComboBox.setValue(selectedPersona.getVivienda());&#10;        } else {&#10;            viviendaComboBox.setValue(null);&#10;        }&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        String errorMessage = &quot;&quot;;&#10;&#10;        if (nombreField.getText() == null || nombreField.getText().trim().isEmpty()) {&#10;            errorMessage += &quot;Nombre no válido.\n&quot;;&#10;        }&#10;        if (familiaComboBox.getValue() == null) {&#10;            errorMessage += &quot;Debe seleccionar una familia.\n&quot;;&#10;        }&#10;        if (rfcField.getText() == null || rfcField.getText().trim().isEmpty()) {&#10;            errorMessage += &quot;RFC no válido.\n&quot;;&#10;        }&#10;        if (edadField.getText() == null || edadField.getText().trim().isEmpty()) {&#10;            errorMessage += &quot;Edad no válida.\n&quot;;&#10;        } else {&#10;            try {&#10;                Integer.parseInt(edadField.getText());&#10;            } catch (NumberFormatException e) {&#10;                errorMessage += &quot;La edad debe ser un número entero.\n&quot;;&#10;            }&#10;        }&#10;&#10;        if (errorMessage.isEmpty()) {&#10;            return true;&#10;        } else {&#10;            Alert alert = new Alert(Alert.AlertType.ERROR);&#10;            alert.setTitle(&quot;Campos no válidos&quot;);&#10;            alert.setHeaderText(&quot;Por favor, corrija los campos no válidos&quot;);&#10;            alert.setContentText(errorMessage);&#10;            alert.showAndWait();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private void clearFields() {&#10;        nombreField.clear();&#10;        familiaComboBox.setValue(null);&#10;        rfcField.clear();&#10;        edadField.clear();&#10;        esJefeDeFamiliaCheckBox.setSelected(false);&#10;        viviendaComboBox.setValue(null);&#10;&#10;        // Forzar refresco visual de ComboBox&#10;        familiaComboBox.setButtonCell(new ListCell&lt;Familia&gt;() {&#10;            @Override&#10;            protected void updateItem(Familia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione familia&quot;);&#10;                } else {&#10;                    setText(item.getApellidos() + &quot; (ID: &quot; + item.getId() + &quot;)&quot;);&#10;                }&#10;            }&#10;        });&#10;&#10;        viviendaComboBox.setButtonCell(new ListCell&lt;Vivienda&gt;() {&#10;            @Override&#10;            protected void updateItem(Vivienda item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione vivienda&quot;);&#10;                } else {&#10;                    if (item instanceof CasaUnifamiliar) {&#10;                        CasaUnifamiliar casa = (CasaUnifamiliar) item;&#10;                        setText(&quot;Casa: &quot; + casa.getDireccion() + &quot; (Clave: &quot; + casa.getNumeroExterior() + &quot;)&quot;);&#10;                    } else if (item instanceof Departamento) {&#10;                        Departamento depto = (Departamento) item;&#10;                        String edificioInfo = &quot;&quot;;&#10;                        if (depto.getEdificio() != null) {&#10;                            edificioInfo = &quot; - Edificio: &quot; + depto.getEdificio().getNombre();&#10;                        }&#10;                        setText(&quot;Depto #&quot; + depto.getNumero() + &quot;: &quot; + depto.getDireccion() + edificioInfo + &quot; (Clave: &quot; + depto.getNumeroExterior() + &quot;)&quot;);&#10;                    } else {&#10;                        setText(item.getDireccion());&#10;                    }&#10;                }&#10;            }&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.vivienda.view;&#10;&#10;import com.example.vivienda.controller.CasaUnifamiliarController;&#10;import com.example.vivienda.controller.DepartamentoController;&#10;import com.example.vivienda.controller.FamiliaController;&#10;import com.example.vivienda.controller.PersonaController;&#10;import com.example.vivienda.model.CasaUnifamiliar;&#10;import com.example.vivienda.model.Departamento;&#10;import com.example.vivienda.model.Familia;&#10;import com.example.vivienda.model.Persona;&#10;import com.example.vivienda.model.Vivienda;&#10;import javafx.beans.property.SimpleIntegerProperty;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.util.StringConverter;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class PersonaViewController {&#10;&#10;    @FXML&#10;    private TextField nombreField;&#10;    @FXML&#10;    private ComboBox&lt;Familia&gt; familiaComboBox;&#10;    @FXML&#10;    private TextField rfcField;&#10;    @FXML&#10;    private TextField edadField;&#10;    @FXML&#10;    private CheckBox esJefeDeFamiliaCheckBox;&#10;    @FXML&#10;    private ComboBox&lt;Vivienda&gt; viviendaComboBox;&#10;    @FXML&#10;    private TableView&lt;Persona&gt; personaTable;&#10;    @FXML&#10;    private TableColumn&lt;Persona, Long&gt; idColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; nombreColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; apellidosColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; rfcColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, Integer&gt; edadColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; esJefeDeFamiliaColumn;  //  Cambiar de Boolean a String&#10;    @FXML&#10;    private TableColumn&lt;Persona, String&gt; viviendaColumn;&#10;    @FXML&#10;    private TableColumn&lt;Persona, Integer&gt; numPropiedadesColumn;&#10;&#10;    //  Botones con fx:id&#10;    @FXML&#10;    private Button crearButton;&#10;    @FXML&#10;    private Button actualizarButton;&#10;    @FXML&#10;    private Button eliminarButton;&#10;    @FXML&#10;    private Button limpiarButton;&#10;    @FXML&#10;    private Button listarButton;&#10;&#10;    //  Filtrado&#10;    @FXML&#10;    private ComboBox&lt;String&gt; filtroComboBox;&#10;    @FXML&#10;    private TextField filtroTextField;&#10;&#10;    private final PersonaController personaController = new PersonaController();&#10;    private final FamiliaController familiaController = new FamiliaController();&#10;    private final CasaUnifamiliarController casaUnifamiliarController = new CasaUnifamiliarController();&#10;    private final DepartamentoController departamentoController = new DepartamentoController();&#10;    private ObservableList&lt;Persona&gt; todasLasPersonas = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        idColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;id&quot;));&#10;        nombreColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;nombre&quot;));&#10;        apellidosColumn.setCellValueFactory(cellData -&gt; {&#10;            Familia f = cellData.getValue().getFamilia();&#10;            return new SimpleStringProperty(f != null ? f.getApellidos() : &quot;&quot;);&#10;        });&#10;        rfcColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;rfc&quot;));&#10;        edadColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;edad&quot;));&#10;&#10;        //  Mostrar &quot;Sí&quot; o &quot;No&quot; en lugar de true/false&#10;        esJefeDeFamiliaColumn.setCellValueFactory(cellData -&gt; {&#10;            boolean esJefe = cellData.getValue().isEsJefeDeFamilia();&#10;            return new SimpleStringProperty(esJefe ? &quot;Sí&quot; : &quot;No&quot;);&#10;        });&#10;&#10;        viviendaColumn.setCellValueFactory(cellData -&gt; {&#10;            Vivienda v = cellData.getValue().getVivienda();&#10;            if (v == null) {&#10;                return new SimpleStringProperty(&quot;Sin vivienda&quot;);&#10;            }&#10;            if (v instanceof CasaUnifamiliar) {&#10;                CasaUnifamiliar casa = (CasaUnifamiliar) v;&#10;                return new SimpleStringProperty(&quot;Casa: &quot; + casa.getDireccion());&#10;            } else if (v instanceof Departamento) {&#10;                Departamento depto = (Departamento) v;&#10;                String edificioInfo = &quot;&quot;;&#10;                if (depto.getEdificio() != null) {&#10;                    edificioInfo = &quot; - Edif: &quot; + depto.getEdificio().getNombre();&#10;                }&#10;                return new SimpleStringProperty(&quot;Depto #&quot; + depto.getNumero() + edificioInfo);&#10;            }&#10;            return new SimpleStringProperty(v.getDireccion());&#10;        });&#10;        numPropiedadesColumn.setCellValueFactory(cellData -&gt;&#10;                new SimpleIntegerProperty(personaController.obtenerNumeroDePropiedades(cellData.getValue())).asObject()&#10;        );&#10;&#10;        //  Inicializar ComboBox de filtrado&#10;        filtroComboBox.setItems(FXCollections.observableArrayList(&#10;            &quot;ID&quot;,&#10;            &quot;Nombre&quot;,&#10;            &quot;Apellidos&quot;,&#10;            &quot;RFC&quot;,&#10;            &quot;Edad&quot;,&#10;            &quot;Jefe de Familia&quot;,&#10;            &quot;Vivienda&quot;,&#10;            &quot;N. Prop.&quot;&#10;        ));&#10;&#10;        //  Listener para filtrar&#10;        filtroTextField.textProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;        filtroComboBox.valueProperty().addListener((observable, oldValue, newValue) -&gt; filtrarTabla());&#10;&#10;        // Configurar ComboBox de familias&#10;        configurarFamiliaComboBox();&#10;        configurarViviendaComboBox();&#10;        loadFamilias();&#10;        loadViviendas();&#10;        // loadPersonas(); // Eliminado el llamado automático a loadPersonas&#10;&#10;        //  Estado inicial de botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;&#10;        //  Cuando se selecciona una fila&#10;        personaTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -&gt; {&#10;            if (newSelection != null) {&#10;                onTableSelection(newSelection);&#10;                crearButton.setDisable(true);&#10;                actualizarButton.setDisable(false);&#10;                eliminarButton.setDisable(false);&#10;            } else {&#10;                crearButton.setDisable(false);&#10;                actualizarButton.setDisable(true);&#10;                eliminarButton.setDisable(true);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void filtrarTabla() {&#10;        String filtroAtributo = filtroComboBox.getValue();&#10;        String filtroTexto = filtroTextField.getText();&#10;&#10;        if (filtroAtributo == null || filtroTexto == null || filtroTexto.trim().isEmpty()) {&#10;            personaTable.setItems(todasLasPersonas);&#10;            return;&#10;        }&#10;&#10;        ObservableList&lt;Persona&gt; personasFiltradas = FXCollections.observableArrayList();&#10;        String textoMinusculas = filtroTexto.toLowerCase().trim();&#10;&#10;        for (Persona persona : todasLasPersonas) {&#10;            boolean coincide = false;&#10;&#10;            switch (filtroAtributo) {&#10;                case &quot;ID&quot;:&#10;                    coincide = String.valueOf(persona.getId()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Nombre&quot;:&#10;                    coincide = persona.getNombre() != null &amp;&amp;&#10;                              persona.getNombre().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Apellidos&quot;:&#10;                    Familia f = persona.getFamilia();&#10;                    coincide = f != null &amp;&amp; f.getApellidos() != null &amp;&amp;&#10;                              f.getApellidos().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;RFC&quot;:&#10;                    coincide = persona.getRfc() != null &amp;&amp;&#10;                              persona.getRfc().toLowerCase().contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Edad&quot;:&#10;                    coincide = String.valueOf(persona.getEdad()).contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Jefe de Familia&quot;:&#10;                    String esJefe = persona.isEsJefeDeFamilia() ? &quot;si&quot; : &quot;no&quot;;&#10;                    coincide = esJefe.contains(textoMinusculas);&#10;                    break;&#10;                case &quot;Vivienda&quot;:&#10;                    Vivienda v = persona.getVivienda();&#10;                    if (v != null) {&#10;                        if (v instanceof CasaUnifamiliar) {&#10;                            CasaUnifamiliar casa = (CasaUnifamiliar) v;&#10;                            coincide = casa.getDireccion() != null &amp;&amp;&#10;                                      casa.getDireccion().toLowerCase().contains(textoMinusculas);&#10;                        } else if (v instanceof Departamento) {&#10;                            Departamento depto = (Departamento) v;&#10;                            coincide = (depto.getNumero() != null &amp;&amp;&#10;                                      depto.getNumero().toLowerCase().contains(textoMinusculas)) ||&#10;                                      (depto.getEdificio() != null &amp;&amp; depto.getEdificio().getNombre() != null &amp;&amp;&#10;                                      depto.getEdificio().getNombre().toLowerCase().contains(textoMinusculas));&#10;                        }&#10;                    }&#10;                    break;&#10;                case &quot;N. Prop.&quot;:&#10;                    int numProp = personaController.obtenerNumeroDePropiedades(persona);&#10;                    coincide = String.valueOf(numProp).contains(textoMinusculas);&#10;                    break;&#10;            }&#10;&#10;            if (coincide) {&#10;                personasFiltradas.add(persona);&#10;            }&#10;        }&#10;&#10;        personaTable.setItems(personasFiltradas);&#10;    }&#10;&#10;    private void configurarFamiliaComboBox() {&#10;        familiaComboBox.setConverter(new StringConverter&lt;Familia&gt;() {&#10;            @Override&#10;            public String toString(Familia familia) {&#10;                if (familia == null) {&#10;                    return null;&#10;                }&#10;                return familia.getApellidos() + &quot; (ID: &quot; + familia.getId() + &quot;)&quot;;&#10;            }&#10;&#10;            @Override&#10;            public Familia fromString(String string) {&#10;                return null;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void configurarViviendaComboBox() {&#10;        viviendaComboBox.setConverter(new StringConverter&lt;Vivienda&gt;() {&#10;            @Override&#10;            public String toString(Vivienda vivienda) {&#10;                if (vivienda == null) {&#10;                    return null;&#10;                }&#10;                if (vivienda instanceof CasaUnifamiliar) {&#10;                    CasaUnifamiliar casa = (CasaUnifamiliar) vivienda;&#10;                    return &quot;Casa: &quot; + casa.getDireccion() + &quot; (Clave: &quot; + casa.getNumeroExterior() + &quot;)&quot;;&#10;                } else if (vivienda instanceof Departamento) {&#10;                    Departamento depto = (Departamento) vivienda;&#10;                    String edificioInfo = &quot;&quot;;&#10;                    if (depto.getEdificio() != null) {&#10;                        edificioInfo = &quot; - Edificio: &quot; + depto.getEdificio().getNombre();&#10;                    }&#10;                    return &quot;Depto #&quot; + depto.getNumero() + &quot;: &quot; + depto.getDireccion() + edificioInfo + &quot; (Clave: &quot; + depto.getNumeroExterior() + &quot;)&quot;;&#10;                }&#10;                return vivienda.getDireccion();&#10;            }&#10;&#10;            @Override&#10;            public Vivienda fromString(String string) {&#10;                return null;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadViviendas() {&#10;        List&lt;Vivienda&gt; viviendas = new ArrayList&lt;&gt;();&#10;&#10;        // Cargar todas las casas unifamiliares&#10;        List&lt;CasaUnifamiliar&gt; casas = casaUnifamiliarController.obtenerTodasLasCasas();&#10;        if (casas != null) {&#10;            viviendas.addAll(casas);&#10;        }&#10;&#10;        // Cargar todos los departamentos&#10;        List&lt;Departamento&gt; departamentos = departamentoController.obtenerTodosLosDepartamentos();&#10;        if (departamentos != null) {&#10;            viviendas.addAll(departamentos);&#10;        }&#10;&#10;        viviendaComboBox.getItems().setAll(viviendas);&#10;    }&#10;&#10;    private void loadFamilias() {&#10;        List&lt;Familia&gt; familias = familiaController.obtenerTodasLasFamilias();&#10;        familiaComboBox.getItems().setAll(familias);&#10;    }&#10;&#10;    private void loadPersonas() {&#10;        List&lt;Persona&gt; personas = personaController.obtenerTodasLasPersonas();&#10;        todasLasPersonas.setAll(personas);&#10;        personaTable.setItems(todasLasPersonas);&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreate() {&#10;        if (!validateInput()) return;&#10;&#10;        Familia familiaSeleccionada = familiaComboBox.getValue();&#10;&#10;        // Validar que solo haya un jefe de familia por apellidos&#10;        if (esJefeDeFamiliaCheckBox.isSelected()) {&#10;            Persona jefeFamiliaExistente = personaController.obtenerJefeDeFamiliaPorApellidos(familiaSeleccionada.getApellidos());&#10;            if (jefeFamiliaExistente != null) {&#10;                Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                alert.setTitle(&quot;Error&quot;);&#10;                alert.setHeaderText(&quot;Ya existe un jefe de familia&quot;);&#10;                alert.setContentText(&quot;La familia con apellidos '&quot; + familiaSeleccionada.getApellidos() +&#10;                                   &quot;' ya tiene un jefe de familia: &quot; + jefeFamiliaExistente.getNombre());&#10;                alert.showAndWait();&#10;                return;&#10;            }&#10;        }&#10;&#10;        Persona persona = new Persona(&#10;                nombreField.getText(),&#10;                rfcField.getText(),&#10;                esJefeDeFamiliaCheckBox.isSelected(),&#10;                Integer.parseInt(edadField.getText()),&#10;                familiaSeleccionada&#10;        );&#10;&#10;        // Asignar la vivienda seleccionada&#10;        Vivienda viviendaSeleccionada = viviendaComboBox.getValue();&#10;        if (viviendaSeleccionada != null) {&#10;            persona.setVivienda(viviendaSeleccionada);&#10;        }&#10;&#10;        personaController.crearPersona(persona);&#10;        loadPersonas();&#10;        clearFields();&#10;&#10;        //  Restaurar botones y limpiar selección&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;        personaTable.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    @FXML&#10;    private void handleUpdate() {&#10;        if (!validateInput()) return;&#10;&#10;        Persona selectedPersona = personaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedPersona != null) {&#10;            Familia familiaSeleccionada = familiaComboBox.getValue();&#10;&#10;            // Validar que solo haya un jefe de familia por apellidos&#10;            if (esJefeDeFamiliaCheckBox.isSelected()) {&#10;                Persona jefeFamiliaExistente = personaController.obtenerJefeDeFamiliaPorApellidos(familiaSeleccionada.getApellidos());&#10;                // Si existe otro jefe de familia y NO es la persona actual que estamos editando&#10;                if (jefeFamiliaExistente != null &amp;&amp; jefeFamiliaExistente.getId() != selectedPersona.getId()) {&#10;                    Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                    alert.setTitle(&quot;Error&quot;);&#10;                    alert.setHeaderText(&quot;Ya existe un jefe de familia&quot;);&#10;                    alert.setContentText(&quot;La familia con apellidos '&quot; + familiaSeleccionada.getApellidos() +&#10;                                       &quot;' ya tiene un jefe de familia: &quot; + jefeFamiliaExistente.getNombre());&#10;                    alert.showAndWait();&#10;                    return;&#10;                }&#10;            }&#10;&#10;            selectedPersona.setNombre(nombreField.getText());&#10;            selectedPersona.setRfc(rfcField.getText());&#10;            selectedPersona.setEdad(Integer.parseInt(edadField.getText()));&#10;            selectedPersona.setEsJefeDeFamilia(esJefeDeFamiliaCheckBox.isSelected());&#10;            selectedPersona.setFamilia(familiaSeleccionada);&#10;&#10;            // Asignar la vivienda seleccionada&#10;            Vivienda viviendaSeleccionada = viviendaComboBox.getValue();&#10;            selectedPersona.setVivienda(viviendaSeleccionada);&#10;&#10;            personaController.actualizarPersona(selectedPersona);&#10;            loadPersonas();&#10;            clearFields();&#10;&#10;            //  Restaurar botones y limpiar selección&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            personaTable.getSelectionModel().clearSelection();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleDelete() {&#10;        Persona selectedPersona = personaTable.getSelectionModel().getSelectedItem();&#10;        if (selectedPersona != null) {&#10;            personaController.eliminarPersonaPorId(selectedPersona.getId());&#10;            loadPersonas();&#10;            clearFields();&#10;&#10;            //  Restaurar botones y limpiar selección&#10;            crearButton.setDisable(false);&#10;            actualizarButton.setDisable(true);&#10;            eliminarButton.setDisable(true);&#10;            personaTable.getSelectionModel().clearSelection();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleLimpiar() {&#10;        clearFields();&#10;        personaTable.getSelectionModel().clearSelection();&#10;&#10;        //  Limpiar filtros&#10;        filtroComboBox.getSelectionModel().clearSelection();&#10;        filtroTextField.clear();&#10;&#10;        // Restaurar botones&#10;        crearButton.setDisable(false);&#10;        actualizarButton.setDisable(true);&#10;        eliminarButton.setDisable(true);&#10;    }&#10;&#10;    @FXML&#10;    private void handleListar() {&#10;        loadPersonas();&#10;    }&#10;&#10;    private void onTableSelection(Persona selectedPersona) {&#10;        nombreField.setText(selectedPersona.getNombre());&#10;        rfcField.setText(selectedPersona.getRfc());&#10;        edadField.setText(String.valueOf(selectedPersona.getEdad()));&#10;        esJefeDeFamiliaCheckBox.setSelected(selectedPersona.isEsJefeDeFamilia());&#10;&#10;        if (selectedPersona.getFamilia() != null) {&#10;            familiaComboBox.setValue(selectedPersona.getFamilia());&#10;        } else {&#10;            familiaComboBox.setValue(null);&#10;        }&#10;&#10;        if (selectedPersona.getVivienda() != null) {&#10;            viviendaComboBox.setValue(selectedPersona.getVivienda());&#10;        } else {&#10;            viviendaComboBox.setValue(null);&#10;        }&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        String errorMessage = &quot;&quot;;&#10;&#10;        if (nombreField.getText() == null || nombreField.getText().trim().isEmpty()) {&#10;            errorMessage += &quot;Nombre no válido.\n&quot;;&#10;        }&#10;        if (familiaComboBox.getValue() == null) {&#10;            errorMessage += &quot;Debe seleccionar una familia.\n&quot;;&#10;        }&#10;        if (rfcField.getText() == null || rfcField.getText().trim().isEmpty()) {&#10;            errorMessage += &quot;RFC no válido.\n&quot;;&#10;        }&#10;        if (edadField.getText() == null || edadField.getText().trim().isEmpty()) {&#10;            errorMessage += &quot;Edad no válida.\n&quot;;&#10;        } else {&#10;            try {&#10;                Integer.parseInt(edadField.getText());&#10;            } catch (NumberFormatException e) {&#10;                errorMessage += &quot;La edad debe ser un número entero.\n&quot;;&#10;            }&#10;        }&#10;&#10;        if (errorMessage.isEmpty()) {&#10;            return true;&#10;        } else {&#10;            Alert alert = new Alert(Alert.AlertType.ERROR);&#10;            alert.setTitle(&quot;Campos no válidos&quot;);&#10;            alert.setHeaderText(&quot;Por favor, corrija los campos no válidos&quot;);&#10;            alert.setContentText(errorMessage);&#10;            alert.showAndWait();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private void clearFields() {&#10;        nombreField.clear();&#10;        familiaComboBox.setValue(null);&#10;        rfcField.clear();&#10;        edadField.clear();&#10;        esJefeDeFamiliaCheckBox.setSelected(false);&#10;        viviendaComboBox.setValue(null);&#10;&#10;        // Forzar refresco visual de ComboBox&#10;        familiaComboBox.setButtonCell(new ListCell&lt;Familia&gt;() {&#10;            @Override&#10;            protected void updateItem(Familia item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione familia&quot;);&#10;                } else {&#10;                    setText(item.getApellidos() + &quot; (ID: &quot; + item.getId() + &quot;)&quot;);&#10;                }&#10;            }&#10;        });&#10;&#10;        viviendaComboBox.setButtonCell(new ListCell&lt;Vivienda&gt;() {&#10;            @Override&#10;            protected void updateItem(Vivienda item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(&quot;Seleccione vivienda&quot;);&#10;                } else {&#10;                    if (item instanceof CasaUnifamiliar) {&#10;                        CasaUnifamiliar casa = (CasaUnifamiliar) item;&#10;                        setText(&quot;Casa: &quot; + casa.getDireccion() + &quot; (Clave: &quot; + casa.getNumeroExterior() + &quot;)&quot;);&#10;                    } else if (item instanceof Departamento) {&#10;                        Departamento depto = (Departamento) item;&#10;                        String edificioInfo = &quot;&quot;;&#10;                        if (depto.getEdificio() != null) {&#10;                            edificioInfo = &quot; - Edificio: &quot; + depto.getEdificio().getNombre();&#10;                        }&#10;                        setText(&quot;Depto #&quot; + depto.getNumero() + &quot;: &quot; + depto.getDireccion() + edificioInfo + &quot; (Clave: &quot; + depto.getNumeroExterior() + &quot;)&quot;);&#10;                    } else {&#10;                        setText(item.getDireccion());&#10;                    }&#10;                }&#10;            }&#10;        });&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/casaunifamiliar-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/casaunifamiliar-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&#10;&lt;GridPane xmlns=&quot;http://javafx.com/javafx/8&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.example.vivienda.view.CasaUnifamiliarViewController&quot; hgap=&quot;15&quot; vgap=&quot;15&quot; alignment=&quot;CENTER&quot; styleClass=&quot;main-pane&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;    &lt;Label text=&quot;Gestión de Casa Unifamiliar&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; GridPane.columnSpan=&quot;2&quot; styleClass=&quot;main-title&quot; /&gt;&#10;    &lt;!-- Campo Dirección --&gt;&#10;    &lt;Label text=&quot;Dirección:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;txtDireccion&quot; promptText=&quot;Ingrese dirección&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;!-- Campos de entrada --&gt;&#10;    &lt;Label text=&quot;Superficie:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;txtSuperficie&quot; promptText=&quot;Ingrese superficie&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;Label text=&quot;Número Exterior:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;txtNumeroExterior&quot; promptText=&quot;Ingrese número exterior&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;Label text=&quot;Nº Pisos:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;txtNumeroPisos&quot; promptText=&quot;Ingrese número de pisos&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;Label text=&quot;Colonia:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboColonia&quot; promptText=&quot;Seleccione colonia&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;5&quot; prefWidth=&quot;200&quot; /&gt;&#10;    &lt;Label text=&quot;Propietario:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;6&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboPropietario&quot; promptText=&quot;Seleccione propietario&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;6&quot; prefWidth=&quot;200&quot; /&gt;&#10;&#10;    &lt;!-- Botones --&gt;&#10;    &lt;HBox spacing=&quot;10&quot; alignment=&quot;CENTER&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;7&quot; GridPane.columnSpan=&quot;2&quot;&gt;&#10;        &lt;Button fx:id=&quot;btnAgregar&quot; text=&quot;Crear&quot; onAction=&quot;#onAgregar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnEditar&quot; text=&quot;Actualizar&quot; onAction=&quot;#onEditar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnEliminar&quot; text=&quot;Eliminar&quot; onAction=&quot;#onEliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnLimpiar&quot; text=&quot;Limpiar&quot; onAction=&quot;#onLimpiar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;8&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;9&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Tabla --&gt;&#10;    &lt;TableView fx:id=&quot;casaUnifamiliarTable&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; prefHeight=&quot;250&quot; prefWidth=&quot;800&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; text=&quot;ID&quot; prefWidth=&quot;50&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;direccionColumn&quot; text=&quot;Dirección&quot; prefWidth=&quot;150&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;superficieColumn&quot; text=&quot;Superficie&quot; prefWidth=&quot;100&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroExteriorColumn&quot; text=&quot;Número Exterior&quot; prefWidth=&quot;130&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroPisosColumn&quot; text=&quot;Nº Pisos&quot; prefWidth=&quot;80&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;coloniaColumn&quot; text=&quot;Colonia&quot; prefWidth=&quot;120&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;propietarioColumn&quot; text=&quot;Propietario&quot; prefWidth=&quot;170&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroHabitantesColumn&quot; text=&quot;Nº Habitantes&quot; prefWidth=&quot;100&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&#10;&lt;GridPane xmlns=&quot;http://javafx.com/javafx/8&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.example.vivienda.view.CasaUnifamiliarViewController&quot; hgap=&quot;15&quot; vgap=&quot;15&quot; alignment=&quot;CENTER&quot; styleClass=&quot;main-pane&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;    &lt;Label text=&quot;Gestión de Casa Unifamiliar&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; GridPane.columnSpan=&quot;2&quot; styleClass=&quot;main-title&quot; /&gt;&#10;    &lt;!-- Campo Dirección --&gt;&#10;    &lt;Label text=&quot;Dirección:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;txtDireccion&quot; promptText=&quot;Ingrese dirección&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;!-- Campos de entrada --&gt;&#10;    &lt;Label text=&quot;Superficie:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;txtSuperficie&quot; promptText=&quot;Ingrese superficie&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;Label text=&quot;Número Exterior:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;txtNumeroExterior&quot; promptText=&quot;Ingrese número exterior&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;Label text=&quot;Nº Pisos:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;txtNumeroPisos&quot; promptText=&quot;Ingrese número de pisos&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;Label text=&quot;Colonia:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboColonia&quot; promptText=&quot;Seleccione colonia&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;5&quot; prefWidth=&quot;200&quot; /&gt;&#10;    &lt;Label text=&quot;Propietario:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;6&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboPropietario&quot; promptText=&quot;Seleccione propietario&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;6&quot; prefWidth=&quot;200&quot; /&gt;&#10;&#10;    &lt;!-- Botones --&gt;&#10;    &lt;HBox spacing=&quot;10&quot; alignment=&quot;CENTER&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;7&quot; GridPane.columnSpan=&quot;2&quot;&gt;&#10;        &lt;Button fx:id=&quot;btnAgregar&quot; text=&quot;Crear&quot; onAction=&quot;#onAgregar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnEditar&quot; text=&quot;Actualizar&quot; onAction=&quot;#onEditar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnEliminar&quot; text=&quot;Eliminar&quot; onAction=&quot;#onEliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnLimpiar&quot; text=&quot;Limpiar&quot; onAction=&quot;#onLimpiar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnListar&quot; text=&quot;Listar&quot; onAction=&quot;#onListar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;8&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;9&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Tabla --&gt;&#10;    &lt;TableView fx:id=&quot;casaUnifamiliarTable&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; prefHeight=&quot;250&quot; prefWidth=&quot;800&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; text=&quot;ID&quot; prefWidth=&quot;50&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;direccionColumn&quot; text=&quot;Dirección&quot; prefWidth=&quot;150&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;superficieColumn&quot; text=&quot;Superficie&quot; prefWidth=&quot;100&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroExteriorColumn&quot; text=&quot;Número Exterior&quot; prefWidth=&quot;130&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroPisosColumn&quot; text=&quot;Nº Pisos&quot; prefWidth=&quot;80&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;coloniaColumn&quot; text=&quot;Colonia&quot; prefWidth=&quot;120&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;propietarioColumn&quot; text=&quot;Propietario&quot; prefWidth=&quot;170&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroHabitantesColumn&quot; text=&quot;Nº Habitantes&quot; prefWidth=&quot;100&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/colonia-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/colonia-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.layout.ColumnConstraints?&gt;&#10;&lt;?import javafx.scene.layout.GridPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.RowConstraints?&gt;&#10;&#10;&lt;GridPane alignment=&quot;CENTER&quot; hgap=&quot;10&quot; vgap=&quot;10&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; xmlns=&quot;http://javafx.com/javafx/21&quot; fx:controller=&quot;com.example.vivienda.view.ColoniaViewController&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;    &lt;Label text=&quot;Nombre:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;nombreField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;Label text=&quot;Código Postal:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;codigoPostalField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot;&gt;&#10;        &lt;Button fx:id=&quot;crearButton&quot; onAction=&quot;#handleCreate&quot; text=&quot;Crear&quot; /&gt;&#10;        &lt;Button fx:id=&quot;actualizarButton&quot; onAction=&quot;#handleUpdate&quot; text=&quot;Actualizar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;eliminarButton&quot; onAction=&quot;#handleDelete&quot; text=&quot;Eliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;limpiarButton&quot; onAction=&quot;#handleLimpiar&quot; text=&quot;Limpiar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;TableView fx:id=&quot;coloniaTable&quot; prefHeight=&quot;200.0&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; prefWidth=&quot;60.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;nombreColumn&quot; prefWidth=&quot;150.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;codigoPostalColumn&quot; prefWidth=&quot;120.0&quot; text=&quot;Código Postal&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numViviendasColumn&quot; prefWidth=&quot;130.0&quot; text=&quot;Nº Viviendas&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.layout.ColumnConstraints?&gt;&#10;&lt;?import javafx.scene.layout.GridPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.RowConstraints?&gt;&#10;&#10;&lt;GridPane alignment=&quot;CENTER&quot; hgap=&quot;10&quot; vgap=&quot;10&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; xmlns=&quot;http://javafx.com/javafx/21&quot; fx:controller=&quot;com.example.vivienda.view.ColoniaViewController&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;    &lt;Label text=&quot;Nombre:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;nombreField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;Label text=&quot;Código Postal:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;codigoPostalField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot;&gt;&#10;        &lt;Button fx:id=&quot;crearButton&quot; onAction=&quot;#handleCreate&quot; text=&quot;Crear&quot; /&gt;&#10;        &lt;Button fx:id=&quot;actualizarButton&quot; onAction=&quot;#handleUpdate&quot; text=&quot;Actualizar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;eliminarButton&quot; onAction=&quot;#handleDelete&quot; text=&quot;Eliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;limpiarButton&quot; onAction=&quot;#handleLimpiar&quot; text=&quot;Limpiar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;listarButton&quot; onAction=&quot;#handleListar&quot; text=&quot;Listar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;TableView fx:id=&quot;coloniaTable&quot; prefHeight=&quot;200.0&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; prefWidth=&quot;60.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;nombreColumn&quot; prefWidth=&quot;150.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;codigoPostalColumn&quot; prefWidth=&quot;120.0&quot; text=&quot;Código Postal&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numViviendasColumn&quot; prefWidth=&quot;130.0&quot; text=&quot;Nº Viviendas&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/departamento-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/departamento-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&#10;&lt;GridPane xmlns=&quot;http://javafx.com/javafx/8&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.example.vivienda.view.DepartamentoViewController&quot; hgap=&quot;15&quot; vgap=&quot;15&quot; alignment=&quot;CENTER&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;    &lt;Label text=&quot;Gestión de Departamentos&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; GridPane.columnSpan=&quot;2&quot; style=&quot;-fx-font-size: 18px; -fx-font-weight: bold;&quot; /&gt;&#10;&#10;    &lt;!-- Campos de entrada --&gt;&#10;    &lt;Label text=&quot;Dirección:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;direccionField&quot; promptText=&quot;Ingrese dirección&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;&#10;    &lt;Label text=&quot;Superficie:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;superficieField&quot; promptText=&quot;Ingrese superficie&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;&#10;    &lt;Label text=&quot;Número interior:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;numeroField&quot; promptText=&quot;Ingrese número (ej: 101, 2A)&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;&#10;    &lt;Label text=&quot;Edificio:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboEdificio&quot; promptText=&quot;Seleccione edificio&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;4&quot; prefWidth=&quot;200&quot; /&gt;&#10;&#10;    &lt;Label text=&quot;Propietario:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboPropietario&quot; promptText=&quot;Seleccione propietario&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;5&quot; prefWidth=&quot;200&quot; /&gt;&#10;&#10;    &lt;!-- Botones --&gt;&#10;    &lt;HBox spacing=&quot;10&quot; alignment=&quot;CENTER&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;6&quot; GridPane.columnSpan=&quot;2&quot;&gt;&#10;        &lt;Button fx:id=&quot;btnCrear&quot; text=&quot;Crear&quot; onAction=&quot;#agregarDepartamento&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnActualizar&quot; text=&quot;Actualizar&quot; onAction=&quot;#actualizarDepartamento&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnEliminar&quot; text=&quot;Eliminar&quot; onAction=&quot;#eliminarDepartamento&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnLimpiar&quot; text=&quot;Limpiar&quot; onAction=&quot;#limpiarCampos&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;7&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;8&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Tabla --&gt;&#10;    &lt;TableView fx:id=&quot;departamentoTable&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;9&quot; GridPane.columnSpan=&quot;2&quot; prefHeight=&quot;250&quot; prefWidth=&quot;900&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; text=&quot;ID&quot; prefWidth=&quot;50&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;direccionColumn&quot; text=&quot;Dirección&quot; prefWidth=&quot;150&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;superficieColumn&quot; text=&quot;Superficie&quot; prefWidth=&quot;100&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroColumn&quot; text=&quot;Número&quot; prefWidth=&quot;80&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;edificioColumn&quot; text=&quot;Edificio&quot; prefWidth=&quot;130&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroExteriorColumn&quot; text=&quot;Número Exterior (Edificio)&quot; prefWidth=&quot;180&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;coloniaColumn&quot; text=&quot;Colonia&quot; prefWidth=&quot;120&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;propietarioColumn&quot; text=&quot;Propietario&quot; prefWidth=&quot;140&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroHabitantesColumn&quot; text=&quot;Nº Habitantes&quot; prefWidth=&quot;100&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&#10;&lt;GridPane xmlns=&quot;http://javafx.com/javafx/8&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.example.vivienda.view.DepartamentoViewController&quot; hgap=&quot;15&quot; vgap=&quot;15&quot; alignment=&quot;CENTER&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;    &lt;Label text=&quot;Gestión de Departamentos&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; GridPane.columnSpan=&quot;2&quot; style=&quot;-fx-font-size: 18px; -fx-font-weight: bold;&quot; /&gt;&#10;&#10;    &lt;!-- Campos de entrada --&gt;&#10;    &lt;Label text=&quot;Dirección:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;direccionField&quot; promptText=&quot;Ingrese dirección&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;&#10;    &lt;Label text=&quot;Superficie:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;superficieField&quot; promptText=&quot;Ingrese superficie&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;&#10;    &lt;Label text=&quot;Número interior:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;numeroField&quot; promptText=&quot;Ingrese número (ej: 101, 2A)&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;&#10;    &lt;Label text=&quot;Edificio:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboEdificio&quot; promptText=&quot;Seleccione edificio&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;4&quot; prefWidth=&quot;200&quot; /&gt;&#10;&#10;    &lt;Label text=&quot;Propietario:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboPropietario&quot; promptText=&quot;Seleccione propietario&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;5&quot; prefWidth=&quot;200&quot; /&gt;&#10;&#10;    &lt;!-- Botones --&gt;&#10;    &lt;HBox spacing=&quot;10&quot; alignment=&quot;CENTER&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;6&quot; GridPane.columnSpan=&quot;2&quot;&gt;&#10;        &lt;Button fx:id=&quot;btnCrear&quot; text=&quot;Crear&quot; onAction=&quot;#agregarDepartamento&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnActualizar&quot; text=&quot;Actualizar&quot; onAction=&quot;#actualizarDepartamento&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnEliminar&quot; text=&quot;Eliminar&quot; onAction=&quot;#eliminarDepartamento&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnLimpiar&quot; text=&quot;Limpiar&quot; onAction=&quot;#limpiarCampos&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnListar&quot; text=&quot;Listar&quot; onAction=&quot;#listarDepartamentos&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;7&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;8&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Tabla --&gt;&#10;    &lt;TableView fx:id=&quot;departamentoTable&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;9&quot; GridPane.columnSpan=&quot;2&quot; prefHeight=&quot;250&quot; prefWidth=&quot;900&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; text=&quot;ID&quot; prefWidth=&quot;50&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;direccionColumn&quot; text=&quot;Dirección&quot; prefWidth=&quot;150&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;superficieColumn&quot; text=&quot;Superficie&quot; prefWidth=&quot;100&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroColumn&quot; text=&quot;Número&quot; prefWidth=&quot;80&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;edificioColumn&quot; text=&quot;Edificio&quot; prefWidth=&quot;130&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroExteriorColumn&quot; text=&quot;Número Exterior (Edificio)&quot; prefWidth=&quot;180&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;coloniaColumn&quot; text=&quot;Colonia&quot; prefWidth=&quot;120&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;propietarioColumn&quot; text=&quot;Propietario&quot; prefWidth=&quot;140&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroHabitantesColumn&quot; text=&quot;Nº Habitantes&quot; prefWidth=&quot;100&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/edificio-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/edificio-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.layout.ColumnConstraints?&gt;&#10;&lt;?import javafx.scene.layout.GridPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.RowConstraints?&gt;&#10;&#10;&lt;GridPane alignment=&quot;CENTER&quot; hgap=&quot;10&quot; vgap=&quot;10&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; xmlns=&quot;http://javafx.com/javafx/21&quot; fx:controller=&quot;com.example.vivienda.view.EdificioViewController&quot;&gt;&#10;    &lt;Label text=&quot;Nombre:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;nombreField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;Label text=&quot;Dirección:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;direccionField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;Label text=&quot;Superficie:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;superficieField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;Label text=&quot;Número Exterior:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;numeroExteriorField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;Label text=&quot;Colonia:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboColonia&quot; promptText=&quot;Seleccione colonia&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;4&quot; prefWidth=&quot;200&quot; /&gt;&#10;    &lt;Label text=&quot;Propietario:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboPropietario&quot; promptText=&quot;Seleccione propietario&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;5&quot; prefWidth=&quot;200&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;6&quot;&gt;&#10;        &lt;Button fx:id=&quot;crearButton&quot; onAction=&quot;#handleCreate&quot; text=&quot;Crear&quot; /&gt;&#10;        &lt;Button fx:id=&quot;actualizarButton&quot; onAction=&quot;#handleUpdate&quot; text=&quot;Actualizar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;eliminarButton&quot; onAction=&quot;#handleDelete&quot; text=&quot;Eliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;limpiarButton&quot; text=&quot;Limpiar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;7&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;8&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;TableView fx:id=&quot;edificioTable&quot; prefHeight=&quot;200.0&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;9&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; prefWidth=&quot;50.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;nombreColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;direccionColumn&quot; prefWidth=&quot;130.0&quot; text=&quot;Dirección&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;superficieColumn&quot; prefWidth=&quot;80.0&quot; text=&quot;Superficie&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroExteriorColumn&quot; prefWidth=&quot;110.0&quot; text=&quot;Número Exterior&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;coloniaColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;Colonia&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;propietarioColumn&quot; prefWidth=&quot;120.0&quot; text=&quot;Propietario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numApartamentosColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;Nº Apartamentos&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroHabitantesColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;Nº Habitantes&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.layout.ColumnConstraints?&gt;&#10;&lt;?import javafx.scene.layout.GridPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.RowConstraints?&gt;&#10;&#10;&lt;GridPane alignment=&quot;CENTER&quot; hgap=&quot;10&quot; vgap=&quot;10&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; xmlns=&quot;http://javafx.com/javafx/21&quot; fx:controller=&quot;com.example.vivienda.view.EdificioViewController&quot;&gt;&#10;    &lt;Label text=&quot;Nombre:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;nombreField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;Label text=&quot;Dirección:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;direccionField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;Label text=&quot;Superficie:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;superficieField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;Label text=&quot;Número Exterior:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;numeroExteriorField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;Label text=&quot;Colonia:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboColonia&quot; promptText=&quot;Seleccione colonia&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;4&quot; prefWidth=&quot;200&quot; /&gt;&#10;    &lt;Label text=&quot;Propietario:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;comboPropietario&quot; promptText=&quot;Seleccione propietario&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;5&quot; prefWidth=&quot;200&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;6&quot;&gt;&#10;        &lt;Button fx:id=&quot;crearButton&quot; onAction=&quot;#handleCreate&quot; text=&quot;Crear&quot; /&gt;&#10;        &lt;Button fx:id=&quot;actualizarButton&quot; onAction=&quot;#handleUpdate&quot; text=&quot;Actualizar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;eliminarButton&quot; onAction=&quot;#handleDelete&quot; text=&quot;Eliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;limpiarButton&quot; text=&quot;Limpiar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;listarButton&quot; onAction=&quot;#handleListar&quot; text=&quot;Listar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;7&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;8&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;TableView fx:id=&quot;edificioTable&quot; prefHeight=&quot;200.0&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;9&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; prefWidth=&quot;50.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;nombreColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;direccionColumn&quot; prefWidth=&quot;130.0&quot; text=&quot;Dirección&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;superficieColumn&quot; prefWidth=&quot;80.0&quot; text=&quot;Superficie&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroExteriorColumn&quot; prefWidth=&quot;110.0&quot; text=&quot;Número Exterior&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;coloniaColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;Colonia&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;propietarioColumn&quot; prefWidth=&quot;120.0&quot; text=&quot;Propietario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numApartamentosColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;Nº Apartamentos&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numeroHabitantesColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;Nº Habitantes&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/familia-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/familia-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.layout.ColumnConstraints?&gt;&#10;&lt;?import javafx.scene.layout.GridPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.RowConstraints?&gt;&#10;&#10;&lt;GridPane alignment=&quot;CENTER&quot; hgap=&quot;10&quot; vgap=&quot;10&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; xmlns=&quot;http://javafx.com/javafx/21&quot; fx:controller=&quot;com.example.vivienda.view.FamiliaViewController&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;    &lt;Label text=&quot;Apellidos:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;apellidosField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;        &lt;Button fx:id=&quot;crearButton&quot; onAction=&quot;#handleCreate&quot; text=&quot;Crear&quot; /&gt;&#10;        &lt;Button fx:id=&quot;actualizarButton&quot; onAction=&quot;#handleUpdate&quot; text=&quot;Actualizar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;eliminarButton&quot; onAction=&quot;#handleDelete&quot; text=&quot;Eliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;limpiarButton&quot; onAction=&quot;#handleLimpiar&quot; text=&quot;Limpiar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;TableView fx:id=&quot;familiaTable&quot; prefHeight=&quot;200.0&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;apellidosColumn&quot; prefWidth=&quot;250.0&quot; text=&quot;Apellidos&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numMiembrosColumn&quot; prefWidth=&quot;150.0&quot; text=&quot;Nº Miembros&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.layout.ColumnConstraints?&gt;&#10;&lt;?import javafx.scene.layout.GridPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.RowConstraints?&gt;&#10;&#10;&lt;GridPane alignment=&quot;CENTER&quot; hgap=&quot;10&quot; vgap=&quot;10&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; xmlns=&quot;http://javafx.com/javafx/21&quot; fx:controller=&quot;com.example.vivienda.view.FamiliaViewController&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;    &lt;Label text=&quot;Apellidos:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;apellidosField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;        &lt;Button fx:id=&quot;crearButton&quot; onAction=&quot;#handleCreate&quot; text=&quot;Crear&quot; /&gt;&#10;        &lt;Button fx:id=&quot;actualizarButton&quot; onAction=&quot;#handleUpdate&quot; text=&quot;Actualizar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;eliminarButton&quot; onAction=&quot;#handleDelete&quot; text=&quot;Eliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;limpiarButton&quot; onAction=&quot;#handleLimpiar&quot; text=&quot;Limpiar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;listarButton&quot; onAction=&quot;#handleListar&quot; text=&quot;Listar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;TableView fx:id=&quot;familiaTable&quot; prefHeight=&quot;200.0&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;apellidosColumn&quot; prefWidth=&quot;250.0&quot; text=&quot;Apellidos&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numMiembrosColumn&quot; prefWidth=&quot;150.0&quot; text=&quot;Nº Miembros&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/persona-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/example/vivienda/view/persona-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.CheckBox?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.layout.ColumnConstraints?&gt;&#10;&lt;?import javafx.scene.layout.GridPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.RowConstraints?&gt;&#10;&#10;&lt;GridPane alignment=&quot;CENTER&quot; hgap=&quot;10&quot; vgap=&quot;10&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; xmlns=&quot;http://javafx.com/javafx/21&quot; fx:controller=&quot;com.example.vivienda.view.PersonaViewController&quot;&gt;&#10;    &lt;Label text=&quot;Nombre:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;nombreField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;Label text=&quot;Familia:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;familiaComboBox&quot; promptText=&quot;Seleccione familia&quot; prefWidth=&quot;250.0&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;Label text=&quot;RFC:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;rfcField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;Label text=&quot;Edad:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;edadField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;Label text=&quot;Jefe de Familia:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;CheckBox fx:id=&quot;esJefeDeFamiliaCheckBox&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;Label text=&quot;Vivienda:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;viviendaComboBox&quot;  promptText=&quot;Seleccione vivienda&quot; prefWidth=&quot;250.0&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;6&quot;&gt;&#10;        &lt;Button fx:id=&quot;crearButton&quot; onAction=&quot;#handleCreate&quot; text=&quot;Crear&quot; /&gt;&#10;        &lt;Button fx:id=&quot;actualizarButton&quot; onAction=&quot;#handleUpdate&quot; text=&quot;Actualizar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;eliminarButton&quot; onAction=&quot;#handleDelete&quot; text=&quot;Eliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;limpiarButton&quot; onAction=&quot;#handleLimpiar&quot; text=&quot;Limpiar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;7&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;8&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;TableView fx:id=&quot;personaTable&quot; prefHeight=&quot;200.0&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;9&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; prefWidth=&quot;75.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;nombreColumn&quot; prefWidth=&quot;150.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;apellidosColumn&quot; prefWidth=&quot;200.0&quot; text=&quot;Apellidos&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;rfcColumn&quot; prefWidth=&quot;150.0&quot; text=&quot;RFC&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;edadColumn&quot; prefWidth=&quot;75.0&quot; text=&quot;Edad&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;esJefeDeFamiliaColumn&quot; prefWidth=&quot;120.0&quot; text=&quot;Jefe de Familia&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;viviendaColumn&quot; prefWidth=&quot;250.0&quot; text=&quot;Vivienda&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numPropiedadesColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;N. Prop.&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.CheckBox?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.layout.ColumnConstraints?&gt;&#10;&lt;?import javafx.scene.layout.GridPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.RowConstraints?&gt;&#10;&#10;&lt;GridPane alignment=&quot;CENTER&quot; hgap=&quot;10&quot; vgap=&quot;10&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; xmlns=&quot;http://javafx.com/javafx/21&quot; fx:controller=&quot;com.example.vivienda.view.PersonaViewController&quot;&gt;&#10;    &lt;Label text=&quot;Nombre:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;nombreField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; /&gt;&#10;    &lt;Label text=&quot;Familia:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;familiaComboBox&quot; promptText=&quot;Seleccione familia&quot; prefWidth=&quot;250.0&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; /&gt;&#10;    &lt;Label text=&quot;RFC:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;rfcField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; /&gt;&#10;    &lt;Label text=&quot;Edad:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;TextField fx:id=&quot;edadField&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot; /&gt;&#10;    &lt;Label text=&quot;Jefe de Familia:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;CheckBox fx:id=&quot;esJefeDeFamiliaCheckBox&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;4&quot; /&gt;&#10;    &lt;Label text=&quot;Vivienda:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;ComboBox fx:id=&quot;viviendaComboBox&quot;  promptText=&quot;Seleccione vivienda&quot; prefWidth=&quot;250.0&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;5&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;6&quot;&gt;&#10;        &lt;Button fx:id=&quot;crearButton&quot; onAction=&quot;#handleCreate&quot; text=&quot;Crear&quot; /&gt;&#10;        &lt;Button fx:id=&quot;actualizarButton&quot; onAction=&quot;#handleUpdate&quot; text=&quot;Actualizar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;eliminarButton&quot; onAction=&quot;#handleDelete&quot; text=&quot;Eliminar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;limpiarButton&quot; onAction=&quot;#handleLimpiar&quot; text=&quot;Limpiar&quot; /&gt;&#10;        &lt;Button fx:id=&quot;listarButton&quot; onAction=&quot;#handleListar&quot; text=&quot;Listar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Sección de filtrado --&gt;&#10;    &lt;Label text=&quot;Filtrar por:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;7&quot; /&gt;&#10;    &lt;HBox spacing=&quot;10&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;8&quot;&gt;&#10;        &lt;ComboBox fx:id=&quot;filtroComboBox&quot; prefWidth=&quot;150.0&quot; promptText=&quot;Seleccione atributo&quot; /&gt;&#10;        &lt;TextField fx:id=&quot;filtroTextField&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Ingrese valor a buscar&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;TableView fx:id=&quot;personaTable&quot; prefHeight=&quot;200.0&quot; GridPane.columnSpan=&quot;2&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;9&quot;&gt;&#10;        &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;idColumn&quot; prefWidth=&quot;75.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;nombreColumn&quot; prefWidth=&quot;150.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;apellidosColumn&quot; prefWidth=&quot;200.0&quot; text=&quot;Apellidos&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;rfcColumn&quot; prefWidth=&quot;150.0&quot; text=&quot;RFC&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;edadColumn&quot; prefWidth=&quot;75.0&quot; text=&quot;Edad&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;esJefeDeFamiliaColumn&quot; prefWidth=&quot;120.0&quot; text=&quot;Jefe de Familia&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;viviendaColumn&quot; prefWidth=&quot;250.0&quot; text=&quot;Vivienda&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;numPropiedadesColumn&quot; prefWidth=&quot;100.0&quot; text=&quot;N. Prop.&quot; /&gt;&#10;        &lt;/columns&gt;&#10;    &lt;/TableView&gt;&#10;    &lt;columnConstraints&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;        &lt;ColumnConstraints /&gt;&#10;    &lt;/columnConstraints&gt;&#10;    &lt;rowConstraints&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;        &lt;RowConstraints /&gt;&#10;    &lt;/rowConstraints&gt;&#10;&lt;/GridPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>